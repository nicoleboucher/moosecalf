#Wolf response to silviculture in PGS

# Code for iSSA
save.image(file='iSSA_wolf_2seasons_bootstrap.RData')

#load
load(file='iSSA_wolf_2seasons_bootstrap.RData')
load(file='iSSA_wolf_booty.RData')
####################### Getting set up #########################

### LOAD PACKAGES ###
lapply(c("forcats","viridis","stringr","fastDummies","car","matrixStats","ppcor","geosphere","MODIS","MODIStsp","velox","rgeos","data.table","plyr","raster", "lubridate", "amt", "magrittr", "readr", "dplyr", "maptools", "spatstat", "tidyr", "ggplot2", "survival", "cowplot", "rgeos", "rgdal", "sf", "sp", "MASS", "readr", "boot", "reshape"), require, character.only = TRUE)

##set wd
setwd("D:/OneDrive/Documents/Academic/PhD/Publications/iSSA/Data/")

##set seed
set.seed(1)

####################### Making available tracks for iSSA #########################

### LOAD DATA ###
wolves_used_final<-read.csv("wolf_alltelemetry.csv")

#check for missing values, no action if TRUE
all(complete.cases(wolves_used_final)) 

#parse date and time and create time stamps
wolves_used_final$hour <- format(strptime(wolves_used_final$LMT_Time, "%I:%M:%S %p"),"%H:%M:%S")
wolves_used_final$Hour <- substr(wolves_used_final$hour, start = 1, stop = 2)
wolves_used_final$ts <- as.POSIXct(ymd(wolves_used_final$LMT_Date) + hms(wolves_used_final$hour))
wolves_used_final <- wolves_used_final[,-c(6,7)]

#create month and season columns
wolves_used_final$Month <- month(as.POSIXlt(wolves_used_final$ts, format="%d/%m/%Y"))
wolves_used_final$Year <- year(as.POSIXlt(wolves_used_final$ts, format="%d/%m/%Y"))
wolves_used_final$Season <- wolves_used_final$Month
wolves_used_final$Season[wolves_used_final$Season >= 1 & wolves_used_final$Season <= 2] <- "Winter"
wolves_used_final$Season[wolves_used_final$Season >= 3 & wolves_used_final$Season <= 4] <- "Winter"
wolves_used_final$Season[wolves_used_final$Season >= 5 & wolves_used_final$Season <= 7] <- "Summer"
wolves_used_final$Season[wolves_used_final$Season >= 8 & wolves_used_final$Season <= 9] <- "Summer"
wolves_used_final$Season[wolves_used_final$Season >= 10 & wolves_used_final$Season <= 12] <- "Winter"

# remove wolves with too few locations (<14 days)
wolves_used_final$check <- paste(wolves_used_final$ID, wolves_used_final$Year, wolves_used_final$Season) #make column for filtering
wolves_used_final <- wolves_used_final %>% group_by(check) %>% filter(n() > 336)#remove animals with <14 days
dt <- data.table(wolves_used_final) #change to data.table
dt[,list(freq = .N), by = "check"] #check that no animals with <7 days remain
wolves_used_final <- wolves_used_final[,-10]
rm(dt)

#split by seasons
alltelemetry <- split(wolves_used_final, wolves_used_final$Season)
dat_summer <- alltelemetry$Summer
dat_winter <- alltelemetry$Winter
rm(alltelemetry, wolves_used_final)

#change field names
summer_used <- dplyr::select(dat_summer, id = ID, x = Longitude, y = Latitude, t = ts)
winter_used <- dplyr::select(dat_winter, id = ID, x = Longitude, y = Latitude, t = ts)
rm(dat_summer,dat_winter)

#nest data into list-column
dat_summer_all <- summer_used %>% nest(-id)
dat_winter_all <- winter_used %>% nest(-id)
rm(summer_used,winter_used)

#create tracks and transform coordinate system
dat_summer_all <- dat_summer_all %>% 
  mutate(trk = map(data, function(d) {
    mk_track(d, x, y, t, crs = sp::CRS("+proj=longlat +datum=WGS84")) %>% 
      transform_coords(sp::CRS("+init=epsg:3005"))
}))
dat_winter_all <- dat_winter_all %>% 
  mutate(trk = map(data, function(d) {
    mk_track(d, x, y, t, crs = sp::CRS("+proj=longlat +datum=WGS84")) %>% 
      transform_coords(sp::CRS("+init=epsg:3005"))
}))

#inspect sampling rate
#samplingrate_winter <- dat_winter_all %>% mutate(sr = lapply(trk, summarize_sampling_rate)) %>% 
#  dplyr::select(id, sr) %>% unnest(-id)

#make steps
summer_used_available <- dat_summer_all %>% mutate(ssf = lapply(trk, function(x) {
  x %>% track_resample(rate = minutes(60), tolerance = minutes(5)) %>%
    filter_min_n_burst(min_n = 3) %>%
    steps_by_burst() %>% random_steps(n = 10) %>% time_of_day(include.crepuscule = TRUE)
}))
winter_used_available <- dat_winter_all %>% mutate(ssf = lapply(trk, function(x) {
  x %>% track_resample(rate = minutes(60), tolerance = minutes(5)) %>%
    filter_min_n_burst(min_n = 3) %>%
    steps_by_burst() %>% random_steps(n = 10) %>% time_of_day(include.crepuscule = TRUE)
}))
rm(dat_summer_all,dat_winter_all)

#unnest data and clean up
wolves_used_available_summer <- summer_used_available %>% unnest(ssf)
wolves_used_available_summer[2:3] <- list(NULL)
wolves_used_available_winter <- winter_used_available %>% unnest(ssf)
wolves_used_available_winter[2:3] <- list(NULL)
rm(summer_used_available, winter_used_available)

#add season
wolves_used_available_summer$season <- "Summer"
wolves_used_available_winter$season <- "Winter"

#make final sheet
wolves_used_available_final <- rbind(wolves_used_available_summer, wolves_used_available_winter)
rm(wolves_used_available_summer,wolves_used_available_winter)
names(wolves_used_available_final) <- gsub(pattern = "_", replacement = "", x = names(wolves_used_available_final))
wolves_used_available_final$year <- as.factor(year(wolves_used_available_final$t1))
wolves_used_available_final$Date <- date(wolves_used_available_final$t1)
wolves_used_available_final$julian.day<-yday(wolves_used_available_final$Date)

#clean erroneous step lengths
cleansl <- wolves_used_available_final[wolves_used_available_final$sl >= 20000,]
cleansl$clean <- as.factor(paste(cleansl$id, cleansl$year, cleansl$season, cleansl$burst, cleansl$stepid))
cleansl_rm <- unique(cleansl$clean)
wolves_used_available_final$clean <- as.factor(paste(wolves_used_available_final$id, wolves_used_available_final$year, wolves_used_available_final$season, wolves_used_available_final$burst, wolves_used_available_final$stepid))
wolves_used_available_final <- wolves_used_available_final[!wolves_used_available_final$clean %in% cleansl_rm,]
rm(cleansl,cleansl_rm)
wolves_used_available_final <- wolves_used_available_final[,-19]

#plot density plot CITE
usedspring <- wolves_used_available_final[wolves_used_available_final$case=="TRUE"&wolves_used_available_final$season=="spring",]
usedearlysum <- wolves_used_available_final[wolves_used_available_final$case=="TRUE"&wolves_used_available_final$season=="earlysum",]
usedlatesum <- wolves_used_available_final[wolves_used_available_final$case=="TRUE"&wolves_used_available_final$season=="latesum",]
usedautumn <- wolves_used_available_final[wolves_used_available_final$case=="TRUE"&wolves_used_available_final$season=="autumn",]
usedwinter <- wolves_used_available_final[wolves_used_available_final$case=="TRUE"&wolves_used_available_final$season=="winter",]
usedall <- wolves_used_available_final[wolves_used_available_final$case=="TRUE",]

p_springsl <- ggplot(usedspring,aes(sl, fill = factor(id))) + geom_density(alpha = 0.4) + labs(fill = "Wolf")+labs(x= "Step length", y = "Density")+ annotate("text", x = 750, y = 0.003, label = "Spring", size = 8)
p_earlysumsl <- ggplot(usedearlysum,aes(sl, fill = factor(id))) + geom_density(alpha = 0.4)+ labs(fill = "Wolf")+labs(x= "Step length", y = "Density")+ annotate("text", x = 750, y = 0.003, label = "Early summer", size = 8)
p_latesumsl <- ggplot(usedlatesum,aes(sl, fill = factor(id))) + geom_density(alpha = 0.4)+ labs(fill = "Wolf")+labs(x= "Step length", y = "Density")+ annotate("text", x = 750, y = 0.003, label = "Late summer", size = 8)
p_autumnsl <- ggplot(usedautumn,aes(sl, fill = factor(id))) + geom_density(alpha = 0.4)+ labs(fill = "Wolf")+labs(x= "Step length", y = "Density")+ annotate("text", x = 750, y = 0.003, label = "Autumn", size = 8)
p_wintersl <- ggplot(usedwinter,aes(sl, fill = factor(id))) + geom_density(alpha = 0.4)+ labs(fill = "Wolf")+labs(x= "Step length", y = "Density")+ annotate("text", x = 750, y = 0.003, label = "Winter", size = 8)
p_allsl <- ggplot(usedall,aes(sl, fill = factor(season))) + geom_density(alpha = 0.4)+ labs(fill = "Wolf")+labs(x= "Step length", y = "Density")
p_allsl
plot_grid(p_springsl,p_earlysumsl,p_latesumsl,p_autumnsl,p_wintersl,ncol=3)

usedall$hour <- hour(usedall$t1)
plot(usedall[usedall$season=="spring",]$hour, usedall[usedall$season=="spring",]$sl)
se <- function(x) sqrt(var(x)/length(x))

mean(usedspring$sl)
se(usedspring$sl)

mean(usedwinter$sl)
se(usedwinter$sl)
####################### Spatial preparation and covariate extraction #########################

#making steps into spatialpointsdataframe (from end points)
crs <- CRS("+init=epsg:3005")
wolves_ua_sp_start <- SpatialPointsDataFrame(wolves_used_available_final[,5:6], 
                                             wolves_used_available_final, proj4string=crs)
wolves_ua_sp_end <- SpatialPointsDataFrame(wolves_used_available_final[,7:8],
                                           wolves_used_available_final, proj4string=crs)
backup <- wolves_used_available_final

############### current NDVI ##################

#import NDVI files into stack
NDVI.rasters<-stack(list.files("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\NDVI\\VI_16Days_250m_v6\\NDVI",pattern='\\.tif$',full.names = TRUE))

#extract julian day from file name
substrRight <- function(x, from, to){
  substr(x, nchar(x)-from+1, nchar(x)-to) 
}

#make into velox stack and add names
NDVI.rasters.vx<-velox(NDVI.rasters)
names(NDVI.rasters.vx$rasterbands)<-names(NDVI.rasters)

#transform to raster crs
#wolves_ua_sp_start1 <- spTransform(wolves_ua_sp_start,crs(NDVI.rasters))
wolves_ua_sp_end1 <- spTransform(wolves_ua_sp_end,crs(NDVI.rasters))

#determine NDVI at each point, matched in time to closest 16-day window for NDVI, extracted from start of step
#wolves_vars_start<-list()
#
#for(i in 1:nrow(wolves_used_available_final)){
#pt<-wolves_ua_sp_start1[i,]
#day<-as.numeric(pt$julian.day-15):as.numeric(pt$julian.day) ## gives sequence of julian dates 16 days prior to the wolf point date
#NDVI.v<-velox(NDVI.rasters.vx$rasterbands[[which(as.numeric(substrRight(names(NDVI.rasters.vx$rasterbands),8,4)) == year(pt$Date)&
#                                          as.numeric(substrRight(names(NDVI.rasters.vx$rasterbands),3,0)) %in% day)]],res = res(NDVI.rasters),extent=as.vector(extent(NDVI.rasters)),crs=crs(NDVI.rasters)) # finds the NDVI raster that was found in the day window
#pt$NDVI<-NDVI.v$extract_points(pt)
#wolves_vars_start[[i]]<-as.data.frame(pt)
#print(i)
#}

#wolves_vars_start<-bind_rows(wolves_vars_start)

#determine NDVI at each point, matched in time to closest 16-day window for NDVI, extracted from end of step
wolves_vars_end<-list()

for(i in 1:nrow(wolves_used_available_final)){
pt<-wolves_ua_sp_end1[i,]
day<-as.numeric(pt$julian.day-15):as.numeric(pt$julian.day) ## gives sequence of julian dates 16 days prior to the wolf point date
NDVI.v<-velox(NDVI.rasters.vx$rasterbands[[which(as.numeric(substrRight(names(NDVI.rasters.vx$rasterbands),8,4)) == year(pt$Date)&
                                          as.numeric(substrRight(names(NDVI.rasters.vx$rasterbands),3,0)) %in% day)]],res = res(NDVI.rasters),extent=as.vector(extent(NDVI.rasters)),crs=crs(NDVI.rasters)) # finds the NDVI raster that was found in the day window
pt$NDVI<-NDVI.v$extract_points(pt)
wolves_vars_end[[i]]<-as.data.frame(pt)
print(i)
}

wolves_vars_end<-bind_rows(wolves_vars_end)

#add NDVI to full dataset
#wolves_used_available_final$start_NDVI <- wolves_vars_start$NDVI
wolves_used_available_final$end_NDVI <- wolves_vars_end$NDVI


#apply scaling factor and remove NAs
#wolves_used_available_final$start_NDVI <- wolves_used_available_final$start_NDVI*0.0001
wolves_used_available_final$end_NDVI <- wolves_used_available_final$end_NDVI*0.0001
#wolves_used_available_final$start_NDVI[is.na(wolves_used_available_final$start_NDVI)] = mean(wolves_used_available_final$start_NDVI, na.rm=TRUE)
wolves_used_available_final$end_NDVI[is.na(wolves_used_available_final$end_NDVI)] = mean(wolves_used_available_final$end_NDVI, na.rm=TRUE)
rm(NDVI.rasters,wolves_vars_end,wolves_vars_start,pt,wolves_ua_sp_start1, wolves_ua_sp_end1,NDVI.rasters.vx,NDVI.v)
############### Land Cover ####################

#load in data
VRI <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\VRI\\LANDCOVER_FINAL_PGS_RAST.tif")
lookup <- read.csv("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Landcover\\VRI_TABLE.csv")

#substitute object ID with landcover
VRI <- subs(VRI,lookup,by="OBJECTID_1",which="Landcover")
VRI <- as.factor(VRI)

#project raster
VRI <- projectRaster(VRI, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
VRI.vx <- velox(VRI)

#extract VRI at start of step
#wolves_used_available_final$start_landcover <- as.factor(round(VRI.vx$extract_points(wolves_ua_sp_start)))

#extract VRI at end of step
wolves_used_available_final$end_landcover <- as.factor(round(VRI.vx$extract_points(wolves_ua_sp_end)))

#replace levels
#levels(wolves_used_available_final$start_landcover) <- c("Coniferous","Deciduous","MixedForest","Nonforest","Pine")
levels(wolves_used_available_final$end_landcover) <- c("Coniferous","Deciduous","MixedForest","Nonforest","Pine")

#change into dummies
wolves_used_available_final<-dummy_cols(wolves_used_available_final, select_columns="start_landcover",remove_first_dummy=FALSE,remove_most_frequent_dummy = FALSE)
wolves_used_available_final<-dummy_cols(wolves_used_available_final, select_columns="end_landcover",remove_first_dummy=FALSE,remove_most_frequent_dummy = FALSE)
rm(VRI)
rm(lookup)

#make a factor
wolves_used_available_final$start_landcover_Coniferous <- as.factor(wolves_used_available_final$start_landcover_Coniferous)
wolves_used_available_final$start_landcover_Deciduous <- as.factor(wolves_used_available_final$start_landcover_Deciduous)
wolves_used_available_final$start_landcover_Pine <- as.factor(wolves_used_available_final$start_landcover_Pine)
wolves_used_available_final$start_landcover_MixedForest <- as.factor(wolves_used_available_final$start_landcover_MixedForest)
wolves_used_available_final$start_landcover_Nonforest <- as.factor(wolves_used_available_final$start_landcover_Nonforest)

wolves_used_available_final$end_landcover_Coniferous <- as.factor(wolves_used_available_final$end_landcover_Coniferous)
wolves_used_available_final$end_landcover_Deciduous <- as.factor(wolves_used_available_final$end_landcover_Deciduous)
wolves_used_available_final$end_landcover_Pine <- as.factor(wolves_used_available_final$end_landcover_Pine)
wolves_used_available_final$end_landcover_MixedForest <- as.factor(wolves_used_available_final$end_landcover_MixedForest)
wolves_used_available_final$end_landcover_Nonforest <- as.factor(wolves_used_available_final$end_landcover_Nonforest)

rm(VRI.vx)

############### Road density ######################

#load road density data
roaddens <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Roads\\PGS_ROADDENS_FINAL.tif")
#roaddens <- projectRaster(roaddens, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
roaddens.vx <- velox(roaddens)

#extract roaddens at start of step
wolves_used_available_final$start_roaddens <- roaddens.vx$extract_points(wolves_ua_sp_start)

#extract roaddens at end of step
wolves_used_available_final$end_roaddens <- roaddens.vx$extract_points(wolves_ua_sp_end)
rm(roaddens,roaddens.vx)

############# Distance to Road ########################

#load distance to road data
roaddist <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Roads\\EucDist_road10m.tif")

#project raster
#roaddist <- projectRaster(roaddist, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
roaddist.vx <- velox(roaddist)

#extract roaddist at start of step
wolves_used_available_final$start_roaddist <- as.numeric(roaddist.vx$extract_points(wolves_ua_sp_start))

#extract roaddist at end of step
wolves_used_available_final$end_roaddist <- as.numeric(roaddist.vx$extract_points(wolves_ua_sp_end))
rm(roaddist,roaddist.vx)

############# Cut blocks ###############################

#load shapefile
cut2018 <- readOGR(dsn="D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\RESULTS", layer="RESULTS_CLIP_50km_2018")
cut2019 <- readOGR(dsn="D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\RESULTS", layer="RESULTS_CLIP_50km_2019")

#clean up
cut2018clean <- cut2018[,-(c(1:114,116:121,123))]
cut2019clean <- cut2019[,-(c(1:114,116:121,123))]
head(cut2018clean@data)
which(colnames(cut2018@data)=="AgeClass") #determines which columns to cut
rm(cut2018,cut2019)

#transform crs
cut2018clean <- spTransform(cut2018clean,crs("+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
cut2019clean <- spTransform(cut2019clean,crs("+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))

#extract data based on year at start of step
start_overcut <- if (wolves_ua_sp_start$year == "2018"){over(wolves_ua_sp_start,cut2018clean,fun=NULL)
} else if (wolves_ua_sp_start$year == "2019"){over(wolves_ua_sp_start,cut2019clean,fun=NULL)
} else if (wolves_used_available_final$year == "2020"){over(wolves_ua_sp_start,cut2019clean,fun=NULL) #change when 2020 cuts available
      } else (print("NA"))
colnames(start_overcut)[1] <- "start_sizeha"
colnames(start_overcut)[2] <- "start_cutage"
colnames(start_overcut)[3] <- "start_cutageclass"

#extract data based on year at end of step
end_overcut <- if (wolves_ua_sp_end$year == "2018"){over(wolves_ua_sp_end,cut2018clean,fun=NULL)
} else if (wolves_ua_sp_end$year == "2019"){over(wolves_ua_sp_end,cut2019clean,fun=NULL)
} else if (wolves_used_available_final$year == "2020"){over(wolves_ua_sp_end,cut2019clean,fun=NULL) #change when 2020 cuts available
      } else (print("NA"))
colnames(end_overcut)[1] <- "end_sizeha"
colnames(end_overcut)[2] <- "end_cutage"
colnames(end_overcut)[3] <- "end_cutageclass"

#combine with the dataset
wolves_used_available_final <- cbind(wolves_used_available_final,start_overcut,end_overcut)
wolves_used_available_final$start_sizeha[is.na(wolves_used_available_final$start_sizeha)] = 0
wolves_used_available_final$end_sizeha[is.na(wolves_used_available_final$end_sizeha)] = 0
wolves_used_available_final$start_cutage[is.na(wolves_used_available_final$start_cutage)] = 0
wolves_used_available_final$end_cutage[is.na(wolves_used_available_final$end_cutage)] = 0
wolves_used_available_final$start_cutageclass <- as.factor(wolves_used_available_final$start_cutageclass)
wolves_used_available_final$end_cutageclass <- as.factor(wolves_used_available_final$end_cutageclass)
wolves_used_available_final$start_cutageclass<- factor(wolves_used_available_final$start_cutageclass, levels = levels(addNA(wolves_used_available_final$start_cutageclass)), labels = c(levels(wolves_used_available_final$start_cutageclass), "UnCut"), exclude = NULL)
wolves_used_available_final$end_cutageclass<- factor(wolves_used_available_final$end_cutageclass, levels = levels(addNA(wolves_used_available_final$end_cutageclass)), labels = c(levels(wolves_used_available_final$end_cutageclass), "UnCut"), exclude = NULL)

#make dummies for cut age classes
wolves_used_available_final<-dummy_cols(wolves_used_available_final, select_columns="start_cutageclass",remove_first_dummy=FALSE,remove_most_frequent_dummy = FALSE)
wolves_used_available_final<-dummy_cols(wolves_used_available_final, select_columns="end_cutageclass",remove_first_dummy=FALSE,remove_most_frequent_dummy = FALSE)

rm(start_overcut, end_overcut)

#################### Edge In #################################

#load distance to forest edge when in forest rasters
edgein2018 <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Edge\\Edgein\\EucDist_edgein2018.tif")
edgein2019 <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Edge\\Edgein\\EucDist_edgein2019.tif")

#transform rasters
#edgein2018 <- projectRaster(edgein2018, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
#edgein2019 <- projectRaster(edgein2019, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")

#create velox raster
edgein2018.vx <- velox(edgein2018)
edgein2019.vx <- velox(edgein2019)

#extract at start of step
wolves_used_available_final$start_edgein1 <- if (wolves_ua_sp_start$year == "2018"){edgein2018.vx$extract_points(wolves_ua_sp_start)
} else if (wolves_ua_sp_start$year == "2019"){edgein2019.vx$extract_points(wolves_ua_sp_start)
} else if (wolves_used_available_final$year == "2020"){edgein2019.vx$extract_points(wolves_ua_sp_start) #change when 2020 cuts available
      } else (print("NA"))

#extract at end of step
wolves_used_available_final$end_edgein <- if (wolves_ua_sp_end$year == "2018"){edgein2018.vx$extract_points(wolves_ua_sp_end)
} else if (wolves_ua_sp_end$year == "2019"){edgein2019.vx$extract_points(wolves_ua_sp_end)
} else if (wolves_used_available_final$year == "2020"){edgein2019.vx$extract_points(wolves_ua_sp_end) #change when 2020 cuts available
      } else (print("NA"))
rm(edgein2018,edgein2019)

wolves_used_available_final$start_edgein[is.na(wolves_used_available_final$start_edgein)] = mean(wolves_used_available_final$start_edgein, na.rm=TRUE)
wolves_used_available_final$end_edgein[is.na(wolves_used_available_final$end_edgein)] = mean(wolves_used_available_final$end_edgein, na.rm=TRUE)

#################### Edge Out #################################

#load distance to forest edge when outside forest rasters
edgeout2018 <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Edge\\edgeout\\EucDist_edgeout2018.tif")
edgeout2019 <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Edge\\edgeout\\EucDist_edgeout2019.tif")

#transform rasters
#edgeout2018 <- projectRaster(edgeout2018, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
#edgeout2019 <- projectRaster(edgeout2019, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")

#create velox raster
edgeout2018.vx <- velox(edgeout2018)
edgeout2019.vx <- velox(edgeout2019)

#extract at start of step
wolves_used_available_final$start_edgeout2 <- if (wolves_ua_sp_start$year == "2018"){edgeout2018.vx$extract_points(wolves_ua_sp_start)
} else if (wolves_ua_sp_start$year == "2019"){edgeout2019.vx$extract_points(wolves_ua_sp_start)
} else if (wolves_used_available_final$year == "2020"){edgeout2019.vx$extract_points(wolves_ua_sp_start) #change when 2020 cuts available
      } else (print("NA"))

#extract at end of step
wolves_used_available_final$end_edgeout <- if (wolves_ua_sp_end$year == "2018"){edgeout2018.vx$extract_points(wolves_ua_sp_end)
} else if (wolves_ua_sp_end$year == "2019"){edgeout2019.vx$extract_points(wolves_ua_sp_end)
} else if (wolves_used_available_final$year == "2020"){edgeout2019.vx$extract_points(wolves_ua_sp_end) #change when 2020 cuts available
      } else (print("NA"))
rm(edgeout2018,edgeout2019)

#################### Distance to water  ########

#import raster
water <- raster("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Data\\Spatial\\Water\\dist_water10m.tif")

#transform raster
#water <- projectRaster(water, crs="+init=epsg:3005 +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")

#create velox raster
water.vx <- velox(water)

#extract roaddens at start of step
wolves_used_available_final$start_water <- water.vx$extract_points(wolves_ua_sp_start)

#extract roaddens at end of step
wolves_used_available_final$end_water <- water.vx$extract_points(wolves_ua_sp_end)
rm(water,water.vx)

########### save data! ###############

rm(wolves_ua_sp_start, wolves_ua_sp_end,crs,day,i)
write.csv(wolves_used_available_final, "wolves_used_available_final1.csv")

save.image(file='iSSA_wolf_extractedvariables_final_2seasons.RData')

rm(aspect.vx, cut2018clean,cut2019clean,edgein2018.vx,edgein2019.vx,edgeout2018.vx,edgeout2019.vx, elev.vx,meanNDVI2017.vx)
rm(meanNDVI2018.vx,meanNDVI2019.vx,NDVI.rasters.vx,NDVI.v,roaddens.vx,roaddist.vx,slope.vx,VRI.vx,water.vx)

############# Reload data (if failed) #####################

load(file='iSSA_wolf_extractedvariables_final_2seasons.RData')

#load data
wolves_used_available_final<-read.csv("wolves_used_available_final1.csv")
wolves_used_available_final <- wolves_used_available_final[,-1]

#make a factor
cols <- c("start_landcover_Coniferous", "start_landcover_Deciduous", "start_landcover_Pine", "start_landcover_MixedForest", "start_landcover_Nonforest",
          "end_landcover_Coniferous", "end_landcover_Deciduous", "end_landcover_Pine", "end_landcover_MixedForest", "end_landcover_Nonforest","start_cutageclass_new",
          "start_cutageclass_regen", "start_cutageclass_old","start_cutageclass_UnCut","end_cutageclass_new","end_cutageclass_regen","end_cutageclass_old","end_cutageclass_UnCut")
wolves_used_available_final[cols] <- lapply(wolves_used_available_final[cols], factor)
rm(cols)

#################### Modelling #############################

#rename headings
wolves_used_available_final<-as.data.frame(wolves_used_available_final)
wolves_used_available_final$Year <- wolves_used_available_final$year
wolves_used_available_final$used <- sub("TRUE","1", wolves_used_available_final$case)
wolves_used_available_final$used <- sub("FALSE","0", wolves_used_available_final$used)
wolves_used_available_final$used <- as.numeric(wolves_used_available_final$used)

#change to factor
names(wolves_used_available_final)[names(wolves_used_available_final) == "id"] <- "name"
wolves_used_available_final$name <- as.factor(wolves_used_available_final$name)
wolves_used_available_final$tod_end <- as.numeric(ifelse(wolves_used_available_final$todend=="day",0,1))
wolves_used_available_final$tod_end <- as.numeric(wolves_used_available_final$tod_end)
wolves_used_available_final$season <- as.factor(wolves_used_available_final$season)
wolves_used_available_final$Year <- as.factor(wolves_used_available_final$Year)

#make log step length and cosine turn angle
wolves_used_available_final$lnSL <- log(wolves_used_available_final$sl/1000)
wolves_used_available_final$cosTA <- cos(wolves_used_available_final$ta)

#log of distance variables
wolves_used_available_final$ln_end_water <- log(wolves_used_available_final$end_water+0.1)
wolves_used_available_final$ln_start_water <- log(wolves_used_available_final$start_water+0.1)
wolves_used_available_final$ln_start_roaddist <- log(wolves_used_available_final$start_roaddist+0.1)
wolves_used_available_final$ln_end_roaddist <- log(wolves_used_available_final$end_roaddist+0.1)
wolves_used_available_final$end_aspect <- round(wolves_used_available_final$end_aspect)
wolves_used_available_final$end_sizeha <- wolves_used_available_final$end_sizeha*0.01
wolves_used_available_final$start_sizeha <- wolves_used_available_final$start_sizeha*0.01
wolves_used_available_final$end_edgein <- wolves_used_available_final$end_edgein/1000
wolves_used_available_final$end_edgeout <- wolves_used_available_final$end_edgeout/1000
wolves_used_available_final$ln_end_edgeout <- log(wolves_used_available_final$end_edgeout+0.1)
wolves_used_available_final$ln_end_edgein <- log(wolves_used_available_final$end_edgein+0.1)

wolves_used_available_final$hour <- as.numeric(str_sub(wolves_used_available_final$t2,-8,-7))
wolves_used_available_final$sinhour <- sin((4*pi*(wolves_used_available_final$hour-3))/24)

#remove weird wolf
wolves_used_available_final <- wolves_used_available_final[!(wolves_used_available_final$name=="26818a" & wolves_used_available_final$season=="Winter"),]

############### Check for collinearity ####################

correlation <- cor(wolves_used_available_final[c(19:22,30:54,60:63,65)])
write.csv(correlation,'wolves_vars_correlation.csv')

-----------------------------------
### RUN MODELS ###
-----------------------------------

#organize/scale data
year<-as.vector(2018:2020)
wolf<-vector()
Season<-vector()
Year<-vector()
Model<-vector()
AIC<-vector()
Covariates<-vector()
beta<-vector()
SE<-vector()
p<-vector()

for (i in 1:length(year)){
  data<-wolves_used_available_final %>% filter(Year==!!year[i])
  season<-unique(data$season)
  for (j in 1:length(season)){
    data2<-data %>% filter(season==!!season[j])
    name <- unique(data2$name)
    for (k in 1:length(name)){
    data3<-data2 %>% filter(name ==!!name[k])
    assign(paste(year[i],season[j],name[k],sep=" "),data3)
    if(nrow(data)>0){
      output<-clogit(used~lnSL+lnSL:sinhour+end_landcover_Pine+end_landcover_Deciduous+end_landcover_MixedForest+end_landcover_Coniferous+ln_end_water+end_NDVI+ln_end_edgein+ln_end_edgeout+strata(stepid),data=data3)
      wolf<-append(wolf,rep(as.character(name[k]),length(output$coefficients)))
      Year<-append(Year,rep(year[i],length(output$coefficients)))
      Season<-append(Season,rep(as.character(season[j]),length(output$coefficients)))
      Model<-append(Model,rep("Prey",length(output$coefficients)))
      AIC<-append(AIC,rep(AIC(output),length(output$coefficients)))
      Covariates<-append(Covariates,names(output$coefficients))
      beta<-append(beta,coef(output))
      SE<-append(SE,coef(summary(output))[,"se(coef)"])
      p<-append(p,coef(summary(output))[,"Pr(>|z|)"])
      assign("Prey",output)
      
      output<-clogit(used~lnSL+lnSL:sinhour+end_roaddens+ln_end_roaddist+lnSL:ln_start_roaddist+lnSL:start_roaddens+strata(stepid),data=data3)
      wolf<-append(wolf,rep(as.character(name[k]),length(output$coefficients)))
      Year<-append(Year,rep(year[i],length(output$coefficients)))
      Season<-append(Season,rep(as.character(season[j]),length(output$coefficients)))
      Model<-append(Model,rep("LFN",length(output$coefficients)))
      AIC<-append(AIC,rep(AIC(output),length(output$coefficients)))
      Covariates<-append(Covariates,names(output$coefficients))
      beta<-append(beta,coef(output))
      SE<-append(SE,coef(summary(output))[,"se(coef)"])
      p<-append(p,coef(summary(output))[,"Pr(>|z|)"])
      assign("LFN",output)
           
      output<-clogit(used~lnSL+lnSL:sinhour+end_cutageclass_new+end_cutageclass_regen+end_cutageclass_new:end_sizeha+end_cutageclass_regen:end_sizeha+lnSL:start_cutageclass_new+lnSL:start_cutageclass_regen+lnSL:start_cutageclass_new:start_sizeha+lnSL:start_cutageclass_regen:start_sizeha+strata(stepid),data=data3)
      wolf<-append(wolf,rep(as.character(name[k]),length(output$coefficients)))
      Year<-append(Year,rep(year[i],length(output$coefficients)))
      Season<-append(Season,rep(as.character(season[j]),length(output$coefficients)))
      Model<-append(Model,rep("Cutblock",length(output$coefficients)))
      AIC<-append(AIC,rep(AIC(output),length(output$coefficients)))
      Covariates<-append(Covariates,names(output$coefficients))
      beta<-append(beta,coef(output))
      SE<-append(SE,coef(summary(output))[,"se(coef)"])
      p<-append(p,coef(summary(output))[,"Pr(>|z|)"])
      assign("Cutblock",output)
      
      output<-clogit(used~lnSL+lnSL:sinhour+end_landcover_Pine+end_landcover_Deciduous+end_landcover_MixedForest+end_landcover_Coniferous+ln_end_water+end_NDVI+ln_end_edgein+ln_end_edgeout+end_roaddens+ln_end_roaddist+lnSL:ln_start_roaddist+lnSL:start_roaddens+strata(stepid),data=data3)
      wolf<-append(wolf,rep(as.character(name[k]),length(output$coefficients)))
      Year<-append(Year,rep(year[i],length(output$coefficients)))
      Season<-append(Season,rep(as.character(season[j]),length(output$coefficients)))
      Model<-append(Model,rep("Prey and\n LFN",length(output$coefficients)))
      AIC<-append(AIC,rep(AIC(output),length(output$coefficients)))
      Covariates<-append(Covariates,names(output$coefficients))
      beta<-append(beta,coef(output))
      SE<-append(SE,coef(summary(output))[,"se(coef)"])
      p<-append(p,coef(summary(output))[,"Pr(>|z|)"])
      assign("Prey and\n LFN",output)
            
      output<-clogit(used~lnSL+lnSL:sinhour+end_landcover_Pine+end_landcover_Deciduous+end_landcover_MixedForest+end_landcover_Coniferous+ln_end_water+end_NDVI+ln_end_edgein+ln_end_edgeout+end_cutageclass_new+end_cutageclass_regen+end_cutageclass_new:end_sizeha+end_cutageclass_regen:end_sizeha+lnSL:start_cutageclass_new+lnSL:start_cutageclass_regen+lnSL:start_cutageclass_new:start_sizeha+lnSL:start_cutageclass_regen:start_sizeha+strata(stepid),data=data3)
      wolf<-append(wolf,rep(as.character(name[k]),length(output$coefficients)))
      Year<-append(Year,rep(year[i],length(output$coefficients)))
      Season<-append(Season,rep(as.character(season[j]),length(output$coefficients)))
      Model<-append(Model,rep("Prey and\n Cutblock",length(output$coefficients)))
      AIC<-append(AIC,rep(AIC(output),length(output$coefficients)))
      Covariates<-append(Covariates,names(output$coefficients))
      beta<-append(beta,coef(output))
      SE<-append(SE,coef(summary(output))[,"se(coef)"])
      p<-append(p,coef(summary(output))[,"Pr(>|z|)"])
      assign("Prey and\n Cutblock",output)
                  
      output<-clogit(used~lnSL+lnSL:sinhour+end_roaddens+ln_end_roaddist+lnSL:ln_start_roaddist+lnSL:start_roaddens+end_cutageclass_new+end_cutageclass_regen+end_cutageclass_new:end_sizeha+end_cutageclass_regen:end_sizeha+lnSL:start_cutageclass_new+lnSL:start_cutageclass_regen+lnSL:start_cutageclass_new:start_sizeha+lnSL:start_cutageclass_regen:start_sizeha+strata(stepid),data=data3)
      wolf<-append(wolf,rep(as.character(name[k]),length(output$coefficients)))
      Year<-append(Year,rep(year[i],length(output$coefficients)))
      Season<-append(Season,rep(as.character(season[j]),length(output$coefficients)))
      Model<-append(Model,rep("LFN and\n Cutblock",length(output$coefficients)))
      AIC<-append(AIC,rep(AIC(output),length(output$coefficients)))
      Covariates<-append(Covariates,names(output$coefficients))
      beta<-append(beta,coef(output))
      SE<-append(SE,coef(summary(output))[,"se(coef)"])
      p<-append(p,coef(summary(output))[,"Pr(>|z|)"])
      assign("LFN and\n Cutblock",output)
                  
      output<-clogit(used~lnSL+lnSL:sinhour+end_landcover_Pine+end_landcover_Deciduous+end_landcover_MixedForest+end_landcover_Coniferous+ln_end_water+end_NDVI+ln_end_edgein+ln_end_edgeout+end_cutageclass_new+end_cutageclass_regen+end_cutageclass_new:end_sizeha+end_cutageclass_regen:end_sizeha+lnSL:start_cutageclass_new+lnSL:start_cutageclass_regen+lnSL:start_cutageclass_new:start_sizeha+lnSL:start_cutageclass_regen:start_sizeha+end_roaddens+ln_end_roaddist+lnSL:ln_start_roaddist+lnSL:start_roaddens+strata(stepid),data=data3)
      wolf<-append(wolf,rep(as.character(name[k]),length(output$coefficients)))
      Year<-append(Year,rep(year[i],length(output$coefficients)))
      Season<-append(Season,rep(as.character(season[j]),length(output$coefficients)))
      Model<-append(Model,rep("Global",length(output$coefficients)))
      AIC<-append(AIC,rep(AIC(output),length(output$coefficients)))
      Covariates<-append(Covariates,names(output$coefficients))
      beta<-append(beta,coef(output))
      SE<-append(SE,coef(summary(output))[,"se(coef)"])
      p<-append(p,coef(summary(output))[,"Pr(>|z|)"])
      assign("Global",output)
    }
        print(paste(year[i],season[j],name[k],sep=" "))
    }

  }
}

#create base iSSA dataframe
base_results_issa<-as.data.frame(cbind(wolf,Year,Season,Model,AIC,Covariates,beta,SE,p))
base_results_issa$AIC<-as.numeric(as.character(AIC))
base_results_issa$check <- paste(base_results_issa$wolf, base_results_issa$Year, base_results_issa$Season)

######### Calculate and Plot AIC weights ###############

#make AIC dataframe
AIC_results<-base_results_issa[!duplicated(base_results_issa[,c(1:4)]),]
AIC_results$Model <- factor(AIC_results$Model)
levels(AIC_results$Model)

#split data by season into lists
AIC_results_split <- split(AIC_results, f = AIC_results$Season)

#order each season list
AIC_results_ordered <- lapply(AIC_results_split, function(x) {
                    x[order(x$wolf,x$Year,x$AIC),]} )

#calculate delta AIC
delta_AIC<-vector()
AIC_weights<-vector()

for (i in 1:length(AIC_results_ordered)){
  result<-AIC_results_ordered[[i]]
  name<-unique(result$wolf)

  for (j in 1:length(name)){
    data<-result[result$wolf==name[j],]
    year<-unique(data$Year)
    
  for (k in 1:length(year)){
    data2<-data[data$Year==year[k],]
    if(nrow(data2)>0){
      delta<-data2$AIC-min(data2$AIC)
      delta_AIC<-append(delta_AIC,delta)
    }
    print(paste(name[j],"-",year[k]))
  }
}
}

#unlist data and bind delta AIC to dataset
AIC_results_ordered <- do.call(rbind, AIC_results_ordered)
AIC_results_ordered<-cbind(AIC_results_ordered,delta_AIC)

#determine likelihood and bind to dataset
likelihood<-exp(-0.5*AIC_results_ordered$delta_AIC)
AIC_results_ordered<-cbind(AIC_results_ordered,likelihood)

#relist data by season
AIC_results_ordered <- split(AIC_results_ordered, f = AIC_results$Season)

#create AIC weights
for (i in 1:length(AIC_results_ordered)){
  result<-AIC_results_ordered[[i]]
  name<-unique(result$wolf)

  for (j in 1:length(name)){
    data<-result[result$wolf==name[j],]
    year<-unique(data$Year)
    
  for (k in 1:length(year)){
    data2<-data[data$Year==year[k],]
    if(nrow(data2)>0){
      weight<-data2$likelihood/sum(data2$likelihood)
      AIC_weights<-append(AIC_weights,weight)
    }
    print(paste(name[j],"-",year[k]))
  }
}
}

#unlist data and bind to data frame
AIC_results_ordered <- do.call(rbind, AIC_results_ordered)
AIC_results_ordered <-cbind(AIC_results_ordered,AIC_weights)

#split data set into list by seasons
AIC_results_ordered$Model <- factor(AIC_results_ordered$Model, levels = c("Prey","LFN","Cutblock","Prey and\n LFN", "Prey and\n Cutblock", "LFN and\n Cutblock", "Global"))

AIC_results_ordered$Season <- factor(AIC_results_ordered$Season, levels = c("Summer","Winter"))


AIC_distributions <- ggplot(aes(Model,AIC_weights), data = AIC_results_ordered, width=2) + 
  geom_boxplot(aes(fill = Season),width=0.8,color="black", lwd = 1,
               outlier.shape = NA)+ scale_fill_grey()+labs(y="AIC weights")+
  theme_bw(base_size = 20) +
  theme(axis.title = element_text(size=25),
        axis.text.x = element_text(size=18, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"),
        axis.line = element_line(colour = "black"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(linetype = "solid", colour = "black", size=2),
        panel.background = element_blank(),
        legend.title=element_text(size=25),
        legend.text=element_text(size=20),
        legend.key.size=unit(1, "cm"),
        legend.position=c(0.015,0.98), 
       legend.justification = c(0, 1),
       legend.background = element_blank(),
        legend.box.background = element_rect(colour = "white"))+
  guides(fill=guide_legend(ncol=1))
AIC_distributions

ggsave("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\AIC_Weights.tiff", units="in", width=12, height=8, dpi=300, compression = 'lzw')

---------------------------------------------------
########## Beta Coefficient Bootstrapping #########
---------------------------------------------------

#Beta coeffs - males
wolf_sex<-read.csv("wolf_sex.csv")

#load sex_age info
results_sex_age<-merge(base_results_issa,wolf_sex,by.x=c("wolf","Year"),by.y=c("name","Year"),all.x=T)

#males
results_males_summer <-results_sex_age[results_sex_age$Season=="Summer"&results_sex_age$Model=="Global"&results_sex_age$Sex=="M",]
results_males_winter <-results_sex_age[results_sex_age$Season=="Winter"&results_sex_age$Model=="Global"&results_sex_age$Sex=="M",]

#bootstrap spring
b.boot<-numeric(2000)
average<-vector()
results_males_summer$beta<-as.numeric(as.character(results_males_summer$beta))
results_males_summer$SE<-as.numeric(as.character(results_males_summer$SE))
covariates_summer<-unique(results_males_summer$Covariates)
results_males_summer_betas<-as.data.frame(setNames(replicate(length(covariates_summer),numeric(2000),simplify=F),covariates_summer))

for(n in 1:ncol(results_males_summer_betas)){
  for(j in 1:length(b.boot)){
    wolf_bstrap<-as.vector(sample(unique(results_males_summer$wolf),length(unique(paste(results_males_summer$wolf,results_males_summer$Year)))*2,replace=T))
    bstrap<-data.frame()
    for (i in 1:length(wolf_bstrap)){
      x<-results_males_summer[results_males_summer$Covariates==covariates_summer[n]&results_males_summer$wolf==wolf_bstrap[i],]
      x2<-x[sample(nrow(x),1),]
      bstrap<-rbind(bstrap,x2)
      median<-median(bstrap$beta)

    }
    average[j]<-median
  }
  results_males_summer_betas[,n]<-average
  print(paste(n))
}

assign(paste("pop_males_summer"),results_males_summer_betas)

#bootstrap winter
b.boot<-numeric(2000)
average<-vector()
results_males_winter$beta<-as.numeric(as.character(results_males_winter$beta))
results_males_winter$SE<-as.numeric(as.character(results_males_winter$SE))
covariates_winter<-unique(results_males_winter$Covariates)
results_males_winter_betas<-as.data.frame(setNames(replicate(length(covariates_winter),numeric(2000),simplify=F),covariates_winter))

for(n in 1:ncol(results_males_winter_betas)){
  for(j in 1:length(b.boot)){
    wolf_bstrap<-as.vector(sample(unique(results_males_winter$wolf),length(unique(paste(results_males_winter$wolf,results_males_winter$Year)))*2,replace=T))
    bstrap<-data.frame()
    for (i in 1:length(wolf_bstrap)){
      x<-results_males_winter[results_males_winter$Covariates==covariates_winter[n]&results_males_winter$wolf==wolf_bstrap[i],]
      x2<-x[sample(nrow(x),1),]
      bstrap<-rbind(bstrap,x2)
      
      median<-median(bstrap$beta)

    }
    average[j]<-median
  }
  results_males_winter_betas[,n]<-average
  print(paste(n))
}

assign(paste("pop_males_winter"),results_males_winter_betas)

-----------------------------------
########## Movement betas ##########
-----------------------------------

### Summer movement betas ###

#make betas data frame
movement_betas_summer<-cbind(pop_males_summer[,c(grep("lnSL", colnames(pop_males_summer)))])
movement_betas_summer_long<-stack(movement_betas_summer) #long form
covariate_summer<-as.vector(gsub(".1","",movement_betas_summer_long$ind)) ##create covariate column without .1 next to covariate names
covariate_summer<-as.vector(gsub(".2","",covariate_summer)) ##create covariate column without .1 next to covariate names
covariate_summer<-as.vector(gsub(".3","",covariate_summer)) ##create covariate column without .1 next to covariate names
movement_betas_summer_long<-as.data.frame(cbind(movement_betas_summer_long$values,covariate_summer)) # bind together
colnames(movement_betas_summer_long)<-c("Beta","Covariate") ## rename columns
Reproductive_class_summer<-as.vector(c(rep("male",16000),rep("female",0))) ##create sex column
movement_betas_summer_long<-cbind(movement_betas_summer_long,Reproductive_class_summer) ##bind with rest of table
movement_betas_summer_long$Beta<-as.numeric(as.character(movement_betas_summer_long$Beta)) ##convert beta to numeric
movement_betas_summer_long$Reproductive_class_summer<-factor(movement_betas_summer_long$Reproductive_class_summer,levels = c("male"))
levels(movement_betas_summer_long$Covariate)

#replace covariate names
movement_betas_summer_long$Covariate<-as.character(movement_betas_summer_long$Covariate)
movement_betas_summer_long$Covariate<-replace(movement_betas_summer_long$Covariate,movement_betas_summer_long$Covariate=="lnSL.ln_start_roaddist","lnSL:ln(Road dist)") #replaces text
movement_betas_summer_long$Covariate<-replace(movement_betas_summer_long$Covariate,movement_betas_summer_long$Covariate=="lnSL.sinhour","lnSL:Sin(hour)") #replaces text
movement_betas_summer_long$Covariate<-replace(movement_betas_summer_long$Covariate,movement_betas_summer_long$Covariate=="lnSL.start_cutageclass_new","lnSL:New cut") #replaces text
movement_betas_summer_long$Covariate<-replace(movement_betas_summer_long$Covariate,movement_betas_summer_long$Covariate=="lnSL.start_cutageclass_new.start_sizeha","lnSL:New cut:Cut size") #replaces text
movement_betas_summer_long$Covariate<-replace(movement_betas_summer_long$Covariate,movement_betas_summer_long$Covariate=="lnSL.start_cutageclass_regen","lnSL:Regenerating cut") #replaces text
movement_betas_summer_long$Covariate<-replace(movement_betas_summer_long$Covariate,movement_betas_summer_long$Covariate=="lnSL.start_cutageclass_regen.start_sizeha","lnSL:Regenerating cut:Cut size") #replaces text
movement_betas_summer_long$Covariate<-replace(movement_betas_summer_long$Covariate,movement_betas_summer_long$Covariate=="lnSL.start_roaddens","lnSL:Road density") #replaces text

#make covariate column into factor
movement_betas_summer_long$Covariate<-as.factor(movement_betas_summer_long$Covariate)
movement_betas_summer_long$Season <- "Summer"

### winter movement betas ###

#make betas data frame
movement_betas_winter<-cbind(pop_males_winter[,c(grep("lnSL", colnames(pop_males_winter)))])
movement_betas_winter_long<-stack(movement_betas_winter) #long form
covariate_winter<-as.vector(gsub(".1","",movement_betas_winter_long$ind)) ##create covariate column without .1 next to covariate names
covariate_winter<-as.vector(gsub(".2","",covariate_winter)) ##create covariate column without .1 next to covariate names
covariate_winter<-as.vector(gsub(".3","",covariate_winter)) ##create covariate column without .1 next to covariate names
movement_betas_winter_long<-as.data.frame(cbind(movement_betas_winter_long$values,covariate_winter)) # bind together
colnames(movement_betas_winter_long)<-c("Beta","Covariate") ## rename columns
Reproductive_class_winter<-as.vector(c(rep("male",16000),rep("female",0))) ##create sex column
movement_betas_winter_long<-cbind(movement_betas_winter_long,Reproductive_class_winter) ##bind with rest of table
movement_betas_winter_long$Beta<-as.numeric(as.character(movement_betas_winter_long$Beta)) ##convert beta to numeric
movement_betas_winter_long$Reproductive_class_winter<-factor(movement_betas_winter_long$Reproductive_class_winter,levels = c("male"))
levels(movement_betas_winter_long$Covariate)

#replace covariate names
movement_betas_winter_long$Covariate<-as.character(movement_betas_winter_long$Covariate)
movement_betas_winter_long$Covariate<-replace(movement_betas_winter_long$Covariate,movement_betas_winter_long$Covariate=="lnSL.ln_start_roaddist","lnSL:ln(Road dist)") #replaces text
movement_betas_winter_long$Covariate<-replace(movement_betas_winter_long$Covariate,movement_betas_winter_long$Covariate=="lnSL.sinhour","lnSL:Sin(hour)") #replaces text
movement_betas_winter_long$Covariate<-replace(movement_betas_winter_long$Covariate,movement_betas_winter_long$Covariate=="lnSL.start_cutageclass_new","lnSL:New Cut") #replaces text
movement_betas_winter_long$Covariate<-replace(movement_betas_winter_long$Covariate,movement_betas_winter_long$Covariate=="lnSL.start_cutageclass_new.start_sizeha","lnSL:New cut:Cut size") #replaces text
movement_betas_winter_long$Covariate<-replace(movement_betas_winter_long$Covariate,movement_betas_winter_long$Covariate=="lnSL.start_cutageclass_regen","lnSL:Regenerating cut") #replaces text
movement_betas_winter_long$Covariate<-replace(movement_betas_winter_long$Covariate,movement_betas_winter_long$Covariate=="lnSL.start_cutageclass_regen.start_sizeha","lnSL:Regenerating cut:Cut size") #replaces text
movement_betas_winter_long$Covariate<-replace(movement_betas_winter_long$Covariate,movement_betas_winter_long$Covariate=="lnSL.start_roaddens","lnSL:Road density") #replaces text

#make covariate column into factor
movement_betas_winter_long$Covariate<-as.factor(movement_betas_winter_long$Covariate)
movement_betas_winter_long$Season <- "Winter"

############ Plot all movement betas ##############

colnames(movement_betas_summer_long)[3] <- "Reproductiveclass"
colnames(movement_betas_winter_long)[3] <- "Reproductiveclass"

movement_fixed_betas <- rbind(movement_betas_summer_long,movement_betas_winter_long)
movement_fixed_betas$Season <- as.factor(movement_fixed_betas$Season)

movement_annual<-ggplot(aes(y = Beta, x = Covariate), data = movement_fixed_betas, width=2) + 
  geom_boxplot(aes(fill = Season),width=0.6,color="black", lwd = 1,
               outlier.shape = NA)+
        geom_hline(yintercept=0,col="red",lwd=2)
movement_annual

betas_movement<-group_by(movement_fixed_betas,Season,Covariate) %>% summarise(median = median(Beta),
                                                                                         lower = quantile(Beta,0.025),
                                                                                         upper = quantile(Beta,0.975))
betas_movement
betas_movement$median <- round(betas_movement$median, digits=3)
betas_movement$lower <- round(betas_movement$lower, digits=3)
betas_movement$upper <- round(betas_movement$upper, digits=3)
write.table(betas_movement, file = "D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\betas_movement.txt", sep = ",", quote = FALSE, row.names = F)

ggsave("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\movement betas.tiff", plot=movement_annual, units="in", width=16, height=8, dpi=600, compression = 'lzw')

-----------------------------------
####### HABITAT BETAS ########
-----------------------------------
  
########## summer habitat betas ###########

#make betas data frame
habitat_betas_summer<-cbind(pop_males_summer[,-c(grep("lnSL", colnames(pop_males_summer)))])
habitat_betas_summer_long<-stack(habitat_betas_summer) #long form
covariate_summer<-as.vector(gsub(".1","",habitat_betas_summer_long$ind)) ##create covariate column without .1 next to covariate names
covariate_summer<-as.vector(gsub(".2","",covariate_summer)) ##create covariate column without .1 next to covariate names
covariate_summer<-as.vector(gsub(".3","",covariate_summer)) ##create covariate column without .1 next to covariate names
habitat_betas_summer_long<-as.data.frame(cbind(habitat_betas_summer_long$values,covariate_summer)) # bind together
colnames(habitat_betas_summer_long)<-c("Beta","Covariate") ## rename columns
Reproductive_class_summer<-as.vector(c(rep("male",28000),rep("female",0))) ##create sex column
habitat_betas_summer_long<-cbind(habitat_betas_summer_long,Reproductive_class_summer) ##bind with rest of table
habitat_betas_summer_long$Beta<-as.numeric(as.character(habitat_betas_summer_long$Beta)) ##convert beta to numeric
habitat_betas_summer_long$Reproductive_class_summer<-factor(habitat_betas_summer_long$Reproductive_class_summer,levels = c("male"))

#replace covariate names
levels(habitat_betas_summer_long$Covariate)
habitat_betas_summer_long$Covariate<-as.character(habitat_betas_summer_long$Covariate)
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_cutageclass_new","New cut") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_cutageclass_new.end_sizeha","New cut:Cut size") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_cutageclass_regen","Regen cut") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_cutageclass_regen.end_sizeha","Regen cut:Cut size") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="ln_end_edgein","ln(Edge in)") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="ln_end_edgeout","ln(Edge out)") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_landcover_Coniferous","Coniferous") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_landcover_Deciduous","Deciduous") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_landcover_MixedForest","Mixed forest") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_landcover_Pine","Pine") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_NDVI","NDVI") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="end_roaddens","Road density") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="ln_end_roaddist","ln(Road dist)") #replaces text
habitat_betas_summer_long$Covariate<-replace(habitat_betas_summer_long$Covariate,habitat_betas_summer_long$Covariate=="ln_end_water","ln(Water)") #replaces text

#make covariate column into factor
habitat_betas_summer_long$Covariate<-as.factor(habitat_betas_summer_long$Covariate)
levels(habitat_betas_summer_long$Covariate)
habitat_betas_summer_long$Season <- "Summer"

habitat_fixed_landcover_summer<-habitat_betas_summer_long[habitat_betas_summer_long$Covariate=="Coniferous"|habitat_betas_summer_long$Covariate=="Deciduous"|habitat_betas_summer_long$Covariate=="Mixed forest"|habitat_betas_summer_long$Covariate=="Pine"|habitat_betas_summer_long$Covariate=="ln(Water)"|habitat_betas_summer_long$Covariate=="NDVI",]
habitat_fixed_roads_summer<-habitat_betas_summer_long[habitat_betas_summer_long$Covariate=="ln(Road dist)"|habitat_betas_summer_long$Covariate=="Road density"|habitat_betas_summer_long$Covariate=="Road density:sin(hour)",]
habitat_fixed_cuts_summer<-habitat_betas_summer_long[habitat_betas_summer_long$Covariate=="New cut"|habitat_betas_summer_long$Covariate=="New cut:Cut size"|habitat_betas_summer_long$Covariate=="Regen cut"|habitat_betas_summer_long$Covariate=="Regen cut:Cut size"|habitat_betas_summer_long$Covariate=="ln(Edge in)"|habitat_betas_summer_long$Covariate=="ln(Edge out)",]

########## winter habitat betas ###########

#make betas data frame
habitat_betas_winter<-cbind(pop_males_winter[,-c(grep("lnSL", colnames(pop_males_winter)))])
habitat_betas_winter_long<-stack(habitat_betas_winter) #long form
covariate_winter<-as.vector(gsub(".1","",habitat_betas_winter_long$ind)) ##create covariate column without .1 next to covariate names
covariate_winter<-as.vector(gsub(".2","",covariate_winter)) ##create covariate column without .1 next to covariate names
covariate_winter<-as.vector(gsub(".3","",covariate_winter)) ##create covariate column without .1 next to covariate names
habitat_betas_winter_long<-as.data.frame(cbind(habitat_betas_winter_long$values,covariate_winter)) # bind together
colnames(habitat_betas_winter_long)<-c("Beta","Covariate") ## rename columns
Reproductive_class_winter<-as.vector(c(rep("male",28000),rep("female",0))) ##create sex column
habitat_betas_winter_long<-cbind(habitat_betas_winter_long,Reproductive_class_winter) ##bind with rest of table
habitat_betas_winter_long$Beta<-as.numeric(as.character(habitat_betas_winter_long$Beta)) ##convert beta to numeric
habitat_betas_winter_long$Reproductive_class_winter<-factor(habitat_betas_winter_long$Reproductive_class_winter,levels = c("male"))

#replace covariate names
levels(habitat_betas_winter_long$Covariate)
habitat_betas_winter_long$Covariate<-as.character(habitat_betas_winter_long$Covariate)
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_cutageclass_new","New cut") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_cutageclass_new.end_sizeha","New cut:Cut size") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_cutageclass_regen","Regen cut") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_cutageclass_regen.end_sizeha","Regen cut:Cut size") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="ln_end_edgein","ln(Edge in)") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="ln_end_edgeout","ln(Edge out)") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_landcover_Coniferous","Coniferous") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_landcover_Deciduous","Deciduous") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_landcover_MixedForest","Mixed forest") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_landcover_Pine","Pine") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_NDVI","NDVI") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="end_roaddens","Road density") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="ln_end_roaddist","ln(Road dist)") #replaces text
habitat_betas_winter_long$Covariate<-replace(habitat_betas_winter_long$Covariate,habitat_betas_winter_long$Covariate=="ln_end_water","ln(Water)") #replaces text

#make covariate column into factor
habitat_betas_winter_long$Covariate<-as.factor(habitat_betas_winter_long$Covariate)
levels(habitat_betas_winter_long$Covariate)
habitat_betas_winter_long$Season <- "Winter"

habitat_fixed_landcover_winter<-habitat_betas_winter_long[habitat_betas_winter_long$Covariate=="Coniferous"|habitat_betas_winter_long$Covariate=="Deciduous"|habitat_betas_winter_long$Covariate=="Mixed forest"|habitat_betas_winter_long$Covariate=="Pine"|habitat_betas_winter_long$Covariate=="ln(Water)"|habitat_betas_winter_long$Covariate=="NDVI",]
habitat_fixed_roads_winter<-habitat_betas_winter_long[habitat_betas_winter_long$Covariate=="ln(Road dist)"|habitat_betas_winter_long$Covariate=="Road density"|habitat_betas_winter_long$Covariate=="Road density:sin(hour)",]
habitat_fixed_cuts_winter<-habitat_betas_winter_long[habitat_betas_winter_long$Covariate=="New cut"|habitat_betas_winter_long$Covariate=="New cut:Cut size"|habitat_betas_winter_long$Covariate=="Regen cut"|habitat_betas_winter_long$Covariate=="Regen cut:Cut size"|habitat_betas_winter_long$Covariate=="ln(Edge in)"|habitat_betas_winter_long$Covariate=="ln(Edge out)",]
 
############ Plot all habitat betas ##############

colnames(habitat_fixed_landcover_summer)[3] <- "Reproductiveclass"
colnames(habitat_fixed_roads_summer)[3] <- "Reproductiveclass"
colnames(habitat_fixed_cuts_summer)[3] <- "Reproductiveclass"
colnames(habitat_fixed_landcover_winter)[3] <- "Reproductiveclass"
colnames(habitat_fixed_roads_winter)[3] <- "Reproductiveclass"
colnames(habitat_fixed_cuts_winter)[3] <- "Reproductiveclass"

habitat_fixed_betas_landcover_allseasons <- rbind(habitat_fixed_landcover_summer,habitat_fixed_landcover_winter)
habitat_fixed_betas_roads_allseasons <- rbind(habitat_fixed_roads_summer,habitat_fixed_roads_winter)
habitat_fixed_betas_cuts_allseasons <- rbind(habitat_fixed_cuts_summer,habitat_fixed_cuts_winter)
habitat_fixed_betas_landcover_allseasons$Season <- factor(habitat_fixed_betas_landcover_allseasons$Season, levels = c("Summer","Winter"))
habitat_fixed_betas_roads_allseasons$Season <- factor(habitat_fixed_betas_roads_allseasons$Season, levels = c("Summer","Winter"))
habitat_fixed_betas_cuts_allseasons$Season <- factor(habitat_fixed_betas_cuts_allseasons$Season, levels = c("Summer","Winter"))

habitat_fixed_betas_landcover_allseasons$Covariate <- factor(habitat_fixed_betas_landcover_allseasons$Covariate, levels = c("Coniferous", "Pine", "Deciduous","Mixed forest","NDVI","ln(Water)"))
levels(habitat_fixed_betas_landcover_allseasons$Covariate)
names(habitat_fixed_betas_landcover_allseasons)[names(habitat_fixed_betas_landcover_allseasons) == "season"] <- "Season"


habitat_fixed_betas_all_allseasons <- rbind(habitat_fixed_betas_roads_allseasons,habitat_fixed_betas_landcover_allseasons, habitat_fixed_betas_cuts_allseasons)


habitat_landcovercuts_annual<-ggplot(aes(y = Beta, x = Covariate), data = habitat_fixed_betas_all_allseasons, width=2) + 
  geom_boxplot(aes(fill = Season),width=0.8,color="black", lwd = 0.8,
               outlier.shape = NA)+
  theme_bw(base_size = 20) +
  theme(axis.title = element_text(size=25),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=20, colour = "black"),
        axis.line = element_line(colour = "black"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(linetype = "solid", colour = "black", size=2),
        panel.background = element_blank(),
        legend.title=element_text(size=20),
        legend.text=element_text(size=20),
        legend.key.size=unit(1, "cm"),
        legend.position=c(0.01,0.99), 
       legend.justification = c(0, 1),
       legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black")) +
        geom_hline(yintercept=0,col="red",lwd=2)+ 
  ylim(-2, 2)+
  scale_fill_viridis(discrete=TRUE)+ theme(legend.background = element_blank(),
        legend.box.background = element_rect(colour = "white"))
habitat_landcovercuts_annual

ggsave("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\habitat betas.tiff", plot=habitat_landcovercuts_annual, units="in", width=16, height=8, dpi=600, compression = 'lzw')


### SUMMARY TABLE ###
betas_habitat<-group_by(habitat_fixed_betas_all_allseasons,Season,Covariate) %>% summarise(median = median(Beta),
                                                                                         lower = quantile(Beta,0.025),
                                                                                         upper = quantile(Beta,0.975))

betas_habitat$median <- round(betas_habitat$median, digits=3)
betas_habitat$lower <- round(betas_habitat$lower, digits=3)
betas_habitat$upper <- round(betas_habitat$upper, digits=3)
betas_habitat
write.table(betas_habitat, file = "D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\betas_habitat.txt", sep = ",", quote = FALSE, row.names = F)


-----------------------------------
########### STEP LENGTH RESULTS - ROAD DIST BY CUTAGE ##################
-----------------------------------

##### Step length for covariates by season for new and regen ###############
#spring
slength_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL",7]))
slength_lnslroaddist_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL:ln_start_roaddist",7]))
slength_lnslsinhour_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL:sinhour",7]))
slength_lnslnewcut_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL:start_cutageclass_new",7]))
slength_lnslnewsize_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL:start_cutageclass_new:start_sizeha",7]))
slength_lnslregencut_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL:start_cutageclass_regen",7]))
slength_lnslregensize_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL:start_cutageclass_regen:start_sizeha",7]))
slength_lnslroaddens_summer<-as.numeric(as.character(results_males_summer[results_males_summer$Covariates=="lnSL:start_roaddens",7]))
SL_males_regen_summer<-unique(paste(results_males_summer$wolf,results_males_summer$Year))
SL_males_new_summer<-unique(paste(results_males_summer$wolf,results_males_summer$Year))

#winter
slength_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL",7]))
slength_lnslroaddist_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL:ln_start_roaddist",7]))
slength_lnslsinhour_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL:sinhour",7]))
slength_lnslnewcut_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL:start_cutageclass_new",7]))
slength_lnslnewsize_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL:start_cutageclass_new:start_sizeha",7]))
slength_lnslregencut_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL:start_cutageclass_regen",7]))
slength_lnslregensize_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL:start_cutageclass_regen:start_sizeha",7]))
slength_lnslroaddens_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="lnSL:start_roaddens",7]))
SL_males_regen_winter<-unique(paste(results_males_winter$wolf,results_males_winter$Year))
SL_males_new_winter<-unique(paste(results_males_winter$wolf,results_males_winter$Year))

############ create responses for each wolf for new and regen ##############

#summer
wolves_used_available_final_summer <- wolves_used_available_final[wolves_used_available_final$season=="Summer",]
wolves_used_final_summer <- wolves_used_available_final_summer[wolves_used_available_final_summer$used==1,]
wolf_summer_sl <- wolves_used_final_summer$sl/1000
wolf_summer_gamma<-fitdistr(wolf_summer_sl,"gamma", lower=0.001)
cutsize_summer<-seq(min(wolves_used_available_final$start_sizeha),quantile(wolves_used_available_final$start_sizeha,1),length.out = 100)

for(i in 1:length(cutsize_summer)){
  y_slength_regen_summer<-(1/wolf_summer_gamma$estimate[2])*(wolf_summer_gamma$estimate[1] + 
                                              slength_summer +
                                              (slength_lnslsinhour_summer*mean(wolves_used_available_final$sinhour))+(slength_lnslnewcut_summer*0)+(slength_lnslregencut_summer*1)+
                                                ((slength_lnslnewsize_summer)*(slength_lnslnewcut_summer*0)*cutsize_summer[i])+((slength_lnslregensize_summer)*(slength_lnslregencut_summer*1)*cutsize_summer[i])+
                                                (slength_lnslroaddens_summer*mean(wolves_used_available_final$start_roaddens))+
                                                (slength_lnslroaddist_summer)*mean(wolves_used_available_final$ln_start_roaddist))
  y_slength_new_summer<-(1/wolf_summer_gamma$estimate[2])*(wolf_summer_gamma$estimate[1] + 
                                              slength_summer +
                                              (slength_lnslsinhour_summer*mean(wolves_used_available_final$sinhour))+(slength_lnslnewcut_summer*1)+(slength_lnslregencut_summer*0)+
                                                ((slength_lnslnewsize_summer)*(slength_lnslnewcut_summer*1)*cutsize_summer[i])+((slength_lnslregensize_summer)*(slength_lnslregencut_summer*0)*cutsize_summer[i])+
                                                (slength_lnslroaddens_summer*mean(wolves_used_available_final$start_roaddens))+
                                                (slength_lnslroaddist_summer)*mean(wolves_used_available_final$ln_start_roaddist))

  SL_males_regen_summer<-as.data.frame(cbind(SL_males_regen_summer,y_slength_regen_summer))
  SL_males_new_summer<-as.data.frame(cbind(SL_males_new_summer,y_slength_new_summer))
}

SL_males_regen_summer[,2]<-as.numeric(as.character(SL_males_regen_summer[,2]))
SL_males_new_summer[,2]<-as.numeric(as.character(SL_males_new_summer[,2]))


#winter
wolves_used_available_final_winter <- wolves_used_available_final[wolves_used_available_final$season=="Winter",]
wolves_used_final_winter <- wolves_used_available_final_winter[wolves_used_available_final_winter$used==1,]
wolf_winter_sl <- wolves_used_final_winter$sl/1000
wolf_winter_gamma<-fitdistr(wolf_winter_sl,"gamma", lower=0.001)
cutsize_winter<-seq(min(wolves_used_available_final$start_sizeha),quantile(wolves_used_available_final$start_sizeha,1),length.out = 100)

for(i in 1:length(cutsize_winter)){
  y_slength_regen_winter<-(1/wolf_winter_gamma$estimate[2])*(wolf_winter_gamma$estimate[1] + 
                                              slength_winter +
                                              (slength_lnslsinhour_winter*mean(wolves_used_available_final$sinhour))+(slength_lnslnewcut_winter*0)+(slength_lnslregencut_winter*1)+
                                                ((slength_lnslnewsize_winter)*(slength_lnslnewcut_winter*0)*cutsize_winter[i])+((slength_lnslregensize_winter)*(slength_lnslregencut_winter*1)*cutsize_winter[i])+
                                                (slength_lnslroaddens_winter*mean(wolves_used_available_final$start_roaddens))+
                                                (slength_lnslroaddist_winter)*mean(wolves_used_available_final$ln_start_roaddist))
  y_slength_new_winter<-(1/wolf_winter_gamma$estimate[2])*(wolf_winter_gamma$estimate[1] + 
                                              slength_winter +
                                              (slength_lnslsinhour_winter*mean(wolves_used_available_final$sinhour))+(slength_lnslnewcut_winter*1)+(slength_lnslregencut_winter*0)+
                                                ((slength_lnslnewsize_winter)*(slength_lnslnewcut_winter*1)*cutsize_winter[i])+((slength_lnslregensize_winter)*(slength_lnslregencut_winter*0)*cutsize_winter[i])+
                                                (slength_lnslroaddens_winter*mean(wolves_used_available_final$start_roaddens))+
                                                (slength_lnslroaddist_winter)*mean(wolves_used_available_final$ln_start_roaddist))

  SL_males_regen_winter<-as.data.frame(cbind(SL_males_regen_winter,y_slength_regen_winter))
  SL_males_new_winter<-as.data.frame(cbind(SL_males_new_winter,y_slength_new_winter))
}

SL_males_regen_winter[,2]<-as.numeric(as.character(SL_males_regen_winter[,2]))
SL_males_new_winter[,2]<-as.numeric(as.character(SL_males_new_winter[,2]))


############## BOOTSTRAPPED VALUES FOR ERROR RIBBONS #################

########### bootstrap for wolfs at each d_trail value - regen #################

#summer
average_regen_summer<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_regen_summer[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_regen_summer[SL_males_regen_summer[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_regen_summer[i,]<-mean
  }
}

#winter
average_regen_winter<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_regen_winter[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_regen_winter[SL_males_regen_winter[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_regen_winter[i,]<-mean
  }
}


########### plot median and percentiles - regen #####################

#spring
SL_males_regen_summer<-melt(average_regen_summer[c(1:200),])
cutsize_summer1<-rep(cutsize_summer,each=200)

SL_males_regen_summer<-as.data.frame(cbind(SL_males_regen_summer,cutsize_summer1))

SL_males_regen_final_summer<-SL_males_regen_summer %>% group_by(cutsize_summer1) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_regen_final_summer$season <- "Summer"
names(SL_males_regen_final_summer)[1] <- "Cut size"
SL_males_regen_final_summer$Cutage <- "Regenerating"

#winter
SL_males_regen_winter<-melt(average_regen_winter[c(1:200),])
cutsize_winter1<-rep(cutsize_winter,each=200)

SL_males_regen_winter<-as.data.frame(cbind(SL_males_regen_winter,cutsize_winter1))

SL_males_regen_final_winter<-SL_males_regen_winter %>% group_by(cutsize_winter1) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_regen_final_winter$season <- "Winter"
names(SL_males_regen_final_winter)[1] <- "Cut size"
SL_males_regen_final_winter$Cutage <- "Regenerating"

SL_males_regen_final<-rbind(SL_males_regen_final_summer,SL_males_regen_final_winter)
SL_males_regen_final$season <- factor(SL_males_regen_final$season, levels = c("Summer", "Winter"))
names(SL_males_regen_final)[7] <- "Season"
males_regen <-ggplot(SL_males_regen_final, aes(x=SL_males_regen_final$`Cut size`, y=`50%`,fill=Cutage,colour=Cutage)) +
  geom_ribbon(aes(ymin=`5%`, ymax=`95%`), alpha=0.2) +
  geom_line()+
  labs(x= "Distance to road (m)",y="Step length (km/h)")+ylim(0,1)+
  theme(axis.title = element_text(size=18),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"))
males_regen


###### New #############
#spring
average_new_summer<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_new_summer[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_new_summer[SL_males_new_summer[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_new_summer[i,]<-mean
  }
}

#winter
average_new_winter<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_new_winter[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_new_winter[SL_males_new_winter[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_new_winter[i,]<-mean
  }
}


##plot median and percentiles - new

#summer
SL_males_new_summer<-melt(average_new_summer[c(1:200),])
cutsize_summer2<-rep(cutsize_summer,each=200)

SL_males_new_summer<-as.data.frame(cbind(SL_males_new_summer,cutsize_summer2))

SL_males_new_final_summer<-SL_males_new_summer %>% group_by(cutsize_summer2) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_new_final_summer$season <- "Summer"
names(SL_males_new_final_summer)[1] <- "Cut size"
SL_males_new_final_summer$Cutage <- "New"

#winter
SL_males_new_winter<-melt(average_new_winter[c(1:200),])
cutsize_summer2<-rep(cutsize_summer,each=200)

SL_males_new_winter<-as.data.frame(cbind(SL_males_new_winter,cutsize_summer2))

SL_males_new_final_winter<-SL_males_new_winter %>% group_by(cutsize_summer2) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_new_final_winter$season <- "Winter"
names(SL_males_new_final_winter)[1] <- "Cut size"
SL_males_new_final_winter$Cutage <- "New"

SL_males_new_final<-rbind(SL_males_new_final_summer,SL_males_new_final_winter)
SL_males_new_final$season <- factor(SL_males_new_final$season, levels = c("Summer", "Winter"))
names(SL_males_new_final)[7] <- "Season"

SL_cutagesize <- rbind(SL_males_new_final,SL_males_regen_final)
SL_cutagesize_summer <- SL_cutagesize[SL_cutagesize$Season == "Summer",]
SL_cutagesize_winter <-SL_cutagesize[SL_cutagesize$Season == "Winter",]

males_new <-ggplot(SL_cutagesize_summer, aes(x=`Cut size`, y=`50%`,fill=Cutage,colour=Cutage)) +
  geom_line()+
  geom_ribbon(aes(ymin=`5%`, ymax=`95%`), alpha=0.2)  + 
    coord_cartesian(ylim=c(0, 0.7))+
  labs(x= "Cut size",y="Step length (km/h)")+
  theme(axis.title = element_text(size=18),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"))
males_new

p_SL_cutagesize_winter <-ggplot(SL_cutagesize_winter, aes(x=`Cut size`, y=`50%`,fill=Cutage,colour=Cutage)) +
  geom_line()+
  geom_ribbon(aes(ymin=`5%`, ymax=`95%`), alpha=0.2)  + 
    coord_cartesian(ylim=c(0, 1))+
  labs(x= "Cut size",y="Step length (km/h)")+
  theme(axis.title = element_text(size=18),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"))
p_SL_cutagesize_winter

prow <- plot_grid(
  males_new + theme(legend.position="none"),
  males_regen + theme(legend.position="none"),
  align = 'vh',
  labels = c("     A) New cut", "B) Regenerating cut"),
  hjust=-0.5,
  vjust=2,
  nrow = 1
)
prow

legend <- get_legend(
  # create some space to the left of the legend
  males_roaddist_regen + theme(legend.box.margin = margin(0, 0, 0, 12),legend.text=element_text(size=16), legend.title=element_text(size=20))
)
distroad <- plot_grid(prow, legend, rel_widths = c(3, .4))
distroad
ggsave("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\distance to road.tiff", plot=distroad, units="in", width=17, height=8, dpi=600, compression = 'lzw')


SL_cutage <- rbind(SL_males_new_final, SL_males_regen_final)

ggplot(SL_cutage, aes(x=SL_cutage$`Cut size`, y=`50%`,fill=Cutage)) + facet_grid(~ season) +
  geom_line()+
  geom_ribbon(aes(ymin=`5%`, ymax=`95%`), alpha=0.2)

#################### Road density #########################

#spring
wolves_used_available_final_spring <- wolves_used_available_final[wolves_used_available_final$season=="spring",]
wolves_used_final_spring <- wolves_used_available_final_spring[wolves_used_available_final_spring$used==1,]
wolf_spring_sl <- wolves_used_final_spring$sl/1000
wolf_spring_gamma<-fitdistr(wolf_spring_sl,"gamma", lower=0.001)
d_roaddens_spring<-seq(min(wolves_used_available_final$start_roaddens),quantile(wolves_used_available_final$start_roaddens,1),length.out = 100)

for(i in 1:length(d_roaddens_spring)){
  y_slength_roaddens_regen_spring<-(1/wolf_spring_gamma$estimate[2])*(wolf_spring_gamma$estimate[1] + 
                                              slength_spring +
                                              (slength_lnslsinhour_spring*mean(wolves_used_available_final$sinhour)) +
                                                (slength_lnslroaddist_spring*mean(wolves_used_available_final$ln_start_roaddist)) + (slength_lnslnewcut_spring*0)+(slength_lnslregencut_spring*1)+
                                                (slength_lnslroaddens_spring)*d_roaddens_spring[i])
  y_slength_roaddens_new_spring<-(1/wolf_spring_gamma$estimate[2])*(wolf_spring_gamma$estimate[1] + 
                                              slength_spring +
                                              (slength_lnslsinhour_spring*mean(wolves_used_available_final$sinhour))+
                                                (slength_lnslroaddist_spring*mean(wolves_used_available_final$ln_start_roaddist))+(slength_lnslnewcut_spring*1)+(slength_lnslregencut_spring*0) + 
                                                (slength_lnslroaddens_spring)*d_roaddens_spring[i])

  SL_males_roaddens_regen_spring<-as.data.frame(cbind(SL_males_roaddens_regen_spring,y_slength_roaddens_regen_spring))
  SL_males_roaddens_new_spring<-as.data.frame(cbind(SL_males_roaddens_new_spring,y_slength_roaddens_new_spring))
}

SL_males_roaddens_regen_spring[,2]<-as.numeric(as.character(SL_males_roaddens_regen_spring[,2]))
SL_males_roaddens_new_spring[,2]<-as.numeric(as.character(SL_males_roaddens_new_spring[,2]))

#earlysum
wolves_used_available_final_earlysum <- wolves_used_available_final[wolves_used_available_final$season=="earlysum",]
wolves_used_final_earlysum <- wolves_used_available_final_earlysum[wolves_used_available_final_earlysum$used==1,]
wolf_earlysum_sl <- wolves_used_final_earlysum$sl/1000
wolf_earlysum_gamma<-fitdistr(wolf_earlysum_sl,"gamma", lower=0.001)
d_roaddens_earlysum<-seq(min(wolves_used_available_final$start_roaddens),quantile(wolves_used_available_final$start_roaddens,1),length.out = 100)

for(i in 1:length(d_roaddens_earlysum)){
  y_slength_roaddens_regen_earlysum<-(1/wolf_earlysum_gamma$estimate[2])*(wolf_earlysum_gamma$estimate[1] + 
                                              slength_earlysum +
                                              (slength_lnslsinhour_earlysum*mean(wolves_used_available_final$sinhour)) +
                                                (slength_lnslroaddist_earlysum*mean(wolves_used_available_final$ln_start_roaddist)) + (slength_lnslnewcut_earlysum*0)+(slength_lnslregencut_earlysum*1)+
                                                (slength_lnslroaddens_earlysum)*d_roaddens_earlysum[i])
  y_slength_roaddens_new_earlysum<-(1/wolf_earlysum_gamma$estimate[2])*(wolf_earlysum_gamma$estimate[1] + 
                                              slength_earlysum +
                                              (slength_lnslsinhour_earlysum*mean(wolves_used_available_final$sinhour))+
                                                (slength_lnslroaddist_earlysum*mean(wolves_used_available_final$ln_start_roaddist))+(slength_lnslnewcut_earlysum*1)+(slength_lnslregencut_earlysum*0) + 
                                                (slength_lnslroaddens_earlysum)*d_roaddens_earlysum[i])

  SL_males_roaddens_regen_earlysum<-as.data.frame(cbind(SL_males_roaddens_regen_earlysum,y_slength_roaddens_regen_earlysum))
  SL_males_roaddens_new_earlysum<-as.data.frame(cbind(SL_males_roaddens_new_earlysum,y_slength_roaddens_new_earlysum))
}

SL_males_roaddens_regen_earlysum[,2]<-as.numeric(as.character(SL_males_roaddens_regen_earlysum[,2]))
SL_males_roaddens_new_earlysum[,2]<-as.numeric(as.character(SL_males_roaddens_new_earlysum[,2]))

#latesum
wolves_used_available_final_latesum <- wolves_used_available_final[wolves_used_available_final$season=="latesum",]
wolves_used_final_latesum <- wolves_used_available_final_latesum[wolves_used_available_final_latesum$used==1,]
wolf_latesum_sl <- wolves_used_final_latesum$sl/1000
wolf_latesum_gamma<-fitdistr(wolf_latesum_sl,"gamma", lower=0.001)
d_roaddens_latesum<-seq(min(wolves_used_available_final$start_roaddens),quantile(wolves_used_available_final$start_roaddens,1),length.out = 100)

for(i in 1:length(d_roaddens_latesum)){
  y_slength_roaddens_regen_latesum<-(1/wolf_latesum_gamma$estimate[2])*(wolf_latesum_gamma$estimate[1] + 
                                              slength_latesum +
                                              (slength_lnslsinhour_latesum*mean(wolves_used_available_final$sinhour)) +
                                                (slength_lnslroaddist_latesum*mean(wolves_used_available_final$ln_start_roaddist)) + (slength_lnslnewcut_latesum*0)+(slength_lnslregencut_latesum*1)+
                                                (slength_lnslroaddens_latesum)*d_roaddens_latesum[i])
  y_slength_roaddens_new_latesum<-(1/wolf_latesum_gamma$estimate[2])*(wolf_latesum_gamma$estimate[1] + 
                                              slength_latesum +
                                              (slength_lnslsinhour_latesum*mean(wolves_used_available_final$sinhour))+
                                                (slength_lnslroaddist_latesum*mean(wolves_used_available_final$ln_start_roaddist))+(slength_lnslnewcut_latesum*1)+(slength_lnslregencut_latesum*0) + 
                                                (slength_lnslroaddens_latesum)*d_roaddens_latesum[i])

  SL_males_roaddens_regen_latesum<-as.data.frame(cbind(SL_males_roaddens_regen_latesum,y_slength_roaddens_regen_latesum))
  SL_males_roaddens_new_latesum<-as.data.frame(cbind(SL_males_roaddens_new_latesum,y_slength_roaddens_new_latesum))
}

SL_males_roaddens_regen_latesum[,2]<-as.numeric(as.character(SL_males_roaddens_regen_latesum[,2]))
SL_males_roaddens_new_latesum[,2]<-as.numeric(as.character(SL_males_roaddens_new_latesum[,2]))

#autumn
wolves_used_available_final_autumn <- wolves_used_available_final[wolves_used_available_final$season=="autumn",]
wolves_used_final_autumn <- wolves_used_available_final_autumn[wolves_used_available_final_autumn$used==1,]
wolf_autumn_sl <- wolves_used_final_autumn$sl/1000
wolf_autumn_gamma<-fitdistr(wolf_autumn_sl,"gamma", lower=0.001)
d_roaddens_autumn<-seq(min(wolves_used_available_final$start_roaddens),quantile(wolves_used_available_final$start_roaddens,1),length.out = 100)

for(i in 1:length(d_roaddens_autumn)){
  y_slength_roaddens_regen_autumn<-(1/wolf_autumn_gamma$estimate[2])*(wolf_autumn_gamma$estimate[1] + 
                                              slength_autumn +
                                              (slength_lnslsinhour_autumn*mean(wolves_used_available_final$sinhour)) +
                                                (slength_lnslroaddist_autumn*mean(wolves_used_available_final$ln_start_roaddist)) + (slength_lnslnewcut_autumn*0)+(slength_lnslregencut_autumn*1)+
                                                (slength_lnslroaddens_autumn)*d_roaddens_autumn[i])
  y_slength_roaddens_new_autumn<-(1/wolf_autumn_gamma$estimate[2])*(wolf_autumn_gamma$estimate[1] + 
                                              slength_autumn +
                                              (slength_lnslsinhour_autumn*mean(wolves_used_available_final$sinhour)) +
                                                (slength_lnslroaddist_autumn*mean(wolves_used_available_final$ln_start_roaddist))+ (slength_lnslnewcut_autumn*1)+ (slength_lnslregencut_autumn*0) + 
                                                (slength_lnslroaddens_autumn)*d_roaddens_autumn[i])

  SL_males_roaddens_regen_autumn<-as.data.frame(cbind(SL_males_roaddens_regen_autumn,y_slength_roaddens_regen_autumn))
  SL_males_roaddens_new_autumn<-as.data.frame(cbind(SL_males_roaddens_new_autumn,y_slength_roaddens_new_autumn))
}

SL_males_roaddens_regen_autumn[,2]<-as.numeric(as.character(SL_males_roaddens_regen_autumn[,2]))
SL_males_roaddens_new_autumn[,2]<-as.numeric(as.character(SL_males_roaddens_new_autumn[,2]))

#winter
wolves_used_available_final_winter <- wolves_used_available_final[wolves_used_available_final$season=="winter",]
wolves_used_final_winter <- wolves_used_available_final_winter[wolves_used_available_final_winter$used==1,]
wolf_winter_sl <- wolves_used_final_winter$sl/1000
wolf_winter_gamma<-fitdistr(wolf_winter_sl,"gamma", lower=0.001)
d_roaddens_winter<-seq(min(wolves_used_available_final$start_roaddens),quantile(wolves_used_available_final$start_roaddens,1),length.out = 100)

for(i in 1:length(d_roaddens_winter)){
  y_slength_roaddens_regen_winter<-(1/wolf_winter_gamma$estimate[2])*(wolf_winter_gamma$estimate[1] + 
                                              slength_winter +
                                              (slength_lnslsinhour_winter*mean(wolves_used_available_final$sinhour)) +
                                                (slength_lnslroaddist_winter*mean(wolves_used_available_final$ln_start_roaddist)) + (slength_lnslnewcut_winter*0)+(slength_lnslregencut_winter*1)+
                                                (slength_lnslroaddens_winter)*d_roaddens_winter[i])
  y_slength_roaddens_new_winter<-(1/wolf_winter_gamma$estimate[2])*(wolf_winter_gamma$estimate[1] + 
                                              slength_winter +
                                              (slength_lnslsinhour_winter*mean(wolves_used_available_final$sinhour)) +
                                                (slength_lnslroaddens_winter*mean(wolves_used_available_final$start_roaddens))+ (slength_lnslnewcut_winter*1)+ (slength_lnslregencut_winter*0) + 
                                                (slength_lnslroaddens_winter)*d_roaddens_winter[i])

  SL_males_roaddens_regen_winter<-as.data.frame(cbind(SL_males_roaddens_regen_winter,y_slength_roaddens_regen_winter))
  SL_males_roaddens_new_winter<-as.data.frame(cbind(SL_males_roaddens_new_winter,y_slength_roaddens_new_winter))
}

SL_males_roaddens_regen_winter[,2]<-as.numeric(as.character(SL_males_roaddens_regen_winter[,2]))
SL_males_roaddens_new_winter[,2]<-as.numeric(as.character(SL_males_roaddens_new_winter[,2]))


############## BOOTSTRAPPED VALUES FOR ERROR RIBBONS - ROADDENS #################

########### bootstrap for wolfs at each d_trail value - regen #################

#spring
average_regen_roaddens_spring<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_regen_spring[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_regen_spring[SL_males_roaddens_regen_spring[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_regen_roaddens_spring[i,]<-mean
  }
}

#earlysum
average_regen_roaddens_earlysum<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_regen_earlysum[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_regen_earlysum[SL_males_roaddens_regen_earlysum[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_regen_roaddens_earlysum[i,]<-mean
  }
}

#latesum
average_regen_roaddens_latesum<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_regen_latesum[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_regen_latesum[SL_males_roaddens_regen_latesum[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_regen_roaddens_latesum[i,]<-mean
  }
}

#autumn
average_regen_roaddens_autumn<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_regen_autumn[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_regen_autumn[SL_males_roaddens_regen_autumn[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_regen_roaddens_autumn[i,]<-mean
  }
}

#winter
average_regen_roaddens_winter<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_regen_winter[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_regen_winter[SL_males_roaddens_regen_winter[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_regen_roaddens_winter[i,]<-mean
  }
}


########### plot median and percentiles - regen #####################

#spring
SL_males_roaddens_regen_spring<-melt(average_regen_roaddens_spring[c(1:200),])
d_roaddens_spring1<-rep(d_roaddens_spring,each=200)

SL_males_roaddens_regen_spring<-as.data.frame(cbind(SL_males_roaddens_regen_spring,d_roaddens_spring1))

SL_males_roaddens_regen_final_spring<-SL_males_roaddens_regen_spring %>% group_by(d_roaddens_spring1) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_regen_final_spring$season <- "spring"
names(SL_males_roaddens_regen_final_spring)[1] <- "d_roaddens"

#earlysum
SL_males_roaddens_regen_earlysum<-melt(average_regen_roaddens_earlysum[c(1:200),])
d_roaddens_earlysum1<-rep(d_roaddens_earlysum,each=200)

SL_males_roaddens_regen_earlysum<-as.data.frame(cbind(SL_males_roaddens_regen_earlysum,d_roaddens_earlysum1))

SL_males_roaddens_regen_final_earlysum<-SL_males_roaddens_regen_earlysum %>% group_by(d_roaddens_earlysum1) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_regen_final_earlysum$season <- "earlysum"
names(SL_males_roaddens_regen_final_earlysum)[1] <- "d_roaddens"

#latesum
SL_males_roaddens_regen_latesum<-melt(average_regen_roaddens_latesum[c(1:200),])
d_roaddens_latesum1<-rep(d_roaddens_latesum,each=200)

SL_males_roaddens_regen_latesum<-as.data.frame(cbind(SL_males_roaddens_regen_latesum,d_roaddens_latesum1))

SL_males_roaddens_regen_final_latesum<-SL_males_roaddens_regen_latesum %>% group_by(d_roaddens_latesum1) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_regen_final_latesum$season <- "latesum"
names(SL_males_roaddens_regen_final_latesum)[1] <- "d_roaddens"

#autumn
SL_males_roaddens_regen_autumn<-melt(average_regen_roaddens_autumn[c(1:200),])
d_roaddens_autumn1<-rep(d_roaddens_autumn,each=200)

SL_males_roaddens_regen_autumn<-as.data.frame(cbind(SL_males_roaddens_regen_autumn,d_roaddens_autumn1))

SL_males_roaddens_regen_final_autumn<-SL_males_roaddens_regen_autumn %>% group_by(d_roaddens_autumn1) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_regen_final_autumn$season <- "autumn"
names(SL_males_roaddens_regen_final_autumn)[1] <- "d_roaddens"

#winter
SL_males_roaddens_regen_winter<-melt(average_regen_roaddens_winter[c(1:200),])
d_roaddens_winter1<-rep(d_roaddens_winter,each=200)

SL_males_roaddens_regen_winter<-as.data.frame(cbind(SL_males_roaddens_regen_winter,d_roaddens_winter1))

SL_males_roaddens_regen_final_winter<-SL_males_roaddens_regen_winter %>% group_by(d_roaddens_winter1) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_regen_final_winter$season <- "winter"
names(SL_males_roaddens_regen_final_winter)[1] <- "d_roaddens"

SL_roaddens_males_regen_final<-rbind(SL_males_roaddens_regen_final_spring,SL_males_roaddens_regen_final_earlysum,SL_males_roaddens_regen_final_latesum,SL_males_roaddens_regen_final_autumn,SL_males_roaddens_regen_final_winter)
SL_roaddens_males_regen_final$season <- factor(SL_roaddens_males_regen_final$season, levels = c("spring", "earlysum", "latesum", "autumn", "winter"))
levels(SL_roaddens_males_regen_final$season)[levels(SL_roaddens_males_regen_final$season)=="spring"] <- "Spring"
levels(SL_roaddens_males_regen_final$season)[levels(SL_roaddens_males_regen_final$season)=="earlysum"] <- "Early summer"
levels(SL_roaddens_males_regen_final$season)[levels(SL_roaddens_males_regen_final$season)=="latesum"] <- "Late summer"
levels(SL_roaddens_males_regen_final$season)[levels(SL_roaddens_males_regen_final$season)=="autumn"] <- "Autumn"
levels(SL_roaddens_males_regen_final$season)[levels(SL_roaddens_males_regen_final$season)=="winter"] <- "Winter"
names(SL_roaddens_males_regen_final)[7] <- "Season"
males_roaddens_regen <-ggplot(SL_roaddens_males_regen_final, aes(x=d_roaddens, y=`50%`,fill=Season,colour=Season)) +
  geom_ribbon(aes(ymin=`5%`, ymax=`95%`), alpha=0.2) +
  geom_line()+
  labs(x= expression("Road density"~(km/km^2)),y="Step length (km/h)")+ylim(0,2)+
  theme(axis.title = element_text(size=18),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"))
males_roaddens_regen

###### New #############
#spring
average_new_roaddens_spring<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_new_spring[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_new_spring[SL_males_roaddens_new_spring[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_new_roaddens_spring[i,]<-mean
  }
}

#earlysum
average_new_roaddens_earlysum<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_new_earlysum[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_new_earlysum[SL_males_roaddens_new_earlysum[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_new_roaddens_earlysum[i,]<-mean
  }
}

#latesum
average_new_roaddens_latesum<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_new_latesum[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_new_latesum[SL_males_roaddens_new_latesum[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_new_roaddens_latesum[i,]<-mean
  }
}

#autumn
average_new_roaddens_autumn<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_new_autumn[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_new_autumn[SL_males_roaddens_new_autumn[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_new_roaddens_autumn[i,]<-mean
  }
}

#winter
average_new_roaddens_winter<-data.frame(matrix(NA, nrow = 200, ncol = 100))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(SL_males_roaddens_new_winter[,1]),7,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-SL_males_roaddens_new_winter[SL_males_roaddens_new_winter[,1]==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:101])
    average_new_roaddens_winter[i,]<-mean
  }
}


##plot median and percentiles - new

#spring
SL_males_roaddens_new_spring<-melt(average_new_roaddens_spring[c(1:200),])
d_roaddens_spring2<-rep(d_roaddens_spring,each=200)

SL_males_roaddens_new_spring<-as.data.frame(cbind(SL_males_roaddens_new_spring,d_roaddens_spring2))

SL_males_roaddens_new_final_spring<-SL_males_roaddens_new_spring %>% group_by(d_roaddens_spring2) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_new_final_spring$season <- "spring"
names(SL_males_roaddens_new_final_spring)[1] <- "d_roaddens"

#earlysum
SL_males_roaddens_new_earlysum<-melt(average_new_roaddens_earlysum[c(1:200),])
d_roaddens_earlysum2<-rep(d_roaddens_earlysum,each=200)

SL_males_roaddens_new_earlysum<-as.data.frame(cbind(SL_males_roaddens_new_earlysum,d_roaddens_earlysum2))

SL_males_roaddens_new_final_earlysum<-SL_males_roaddens_new_earlysum %>% group_by(d_roaddens_earlysum2) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_new_final_earlysum$season <- "earlysum"
names(SL_males_roaddens_new_final_earlysum)[1] <- "d_roaddens"

#latesum
SL_males_roaddens_new_latesum<-melt(average_new_roaddens_latesum[c(1:200),])
d_roaddens_latesum2<-rep(d_roaddens_latesum,each=200)

SL_males_roaddens_new_latesum<-as.data.frame(cbind(SL_males_roaddens_new_latesum,d_roaddens_latesum2))

SL_males_roaddens_new_final_latesum<-SL_males_roaddens_new_latesum %>% group_by(d_roaddens_latesum2) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_new_final_latesum$season <- "latesum"
names(SL_males_roaddens_new_final_latesum)[1] <- "d_roaddens"

#autumn
SL_males_roaddens_new_autumn<-melt(average_new_roaddens_autumn[c(1:200),])
d_roaddens_autumn2<-rep(d_roaddens_autumn,each=200)

SL_males_roaddens_new_autumn<-as.data.frame(cbind(SL_males_roaddens_new_autumn,d_roaddens_autumn2))

SL_males_roaddens_new_final_autumn<-SL_males_roaddens_new_autumn %>% group_by(d_roaddens_autumn2) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_new_final_autumn$season <- "autumn"
names(SL_males_roaddens_new_final_autumn)[1] <- "d_roaddens"

#winter
SL_males_roaddens_new_winter<-melt(average_new_roaddens_winter[c(1:200),])
d_roaddens_winter2<-rep(d_roaddens_winter,each=200)

SL_males_roaddens_new_winter<-as.data.frame(cbind(SL_males_roaddens_new_winter,d_roaddens_winter2))

SL_males_roaddens_new_final_winter<-SL_males_roaddens_new_winter %>% group_by(d_roaddens_winter2) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())
SL_males_roaddens_new_final_winter$season <- "winter"
names(SL_males_roaddens_new_final_winter)[1] <- "d_roaddens"

SL_roaddens_males_new_final<-rbind(SL_males_roaddens_new_final_spring,SL_males_roaddens_new_final_earlysum,SL_males_roaddens_new_final_latesum,SL_males_roaddens_new_final_autumn,SL_males_roaddens_new_final_winter)
SL_roaddens_males_new_final$season <- factor(SL_roaddens_males_new_final$season, levels = c("spring", "earlysum", "latesum", "autumn", "winter"))
levels(SL_roaddens_males_new_final$season)[levels(SL_roaddens_males_new_final$season)=="spring"] <- "Spring"
levels(SL_roaddens_males_new_final$season)[levels(SL_roaddens_males_new_final$season)=="earlysum"] <- "Early summer"
levels(SL_roaddens_males_new_final$season)[levels(SL_roaddens_males_new_final$season)=="latesum"] <- "Late summer"
levels(SL_roaddens_males_new_final$season)[levels(SL_roaddens_males_new_final$season)=="autumn"] <- "Autumn"
levels(SL_roaddens_males_new_final$season)[levels(SL_roaddens_males_new_final$season)=="winter"] <- "Winter"

males_roaddens_new <-ggplot(SL_roaddens_males_new_final, aes(x=d_roaddens, y=`50%`,fill=season,colour=season)) +
  geom_line()+
  geom_ribbon(aes(ymin=`5%`, ymax=`95%`), alpha=0.2) +
  labs(x= expression("Road density"~(km/km^2)),y="Step length (km/h)")+ylim(0,2)+
  theme(axis.title = element_text(size=18),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"))

males_roaddens_new

prow2 <- plot_grid(
  males_roaddens_new + theme(legend.position="none"),
  males_roaddens_regen + theme(legend.position="none"),
  align = 'vh',
  labels = c("     C) New cut", "D) Regenerating cut"),
  hjust=-0.5,
  vjust=2,
  nrow = 1
)
prow2

legend2 <- get_legend(
  # create some space to the left of the legend
  males_roaddens_regen + theme(legend.box.margin = margin(0, 0, 0, 12),legend.text=element_text(size=16), legend.title=element_text(size=18))
)
steplengthplot <- plot_grid(prow,legend2,prow2,nrow=2,ncol=2, rel_widths = c(3, .4,3))
steplengthplot
ggsave("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\Step length.tiff", plot=steplengthplot, units="in", width=16, height=8, dpi=600, compression = 'lzw')

-----------------------------------
########### RSS CALCULATIONS ##############
-----------------------------------

  
## RSS - MALES
road_beta_spring<-as.numeric(as.character(results_males_spring[results_males_spring$Covariates=="ln_end_roaddist",7]))
mean_SL_spring<-mean(wolves_used_available_final_spring[wolves_used_available_final_spring$used==1,11])
d_road<-seq(min(wolves_used_available_final_spring$ln_end_roaddist), max(wolves_used_available_final_spring$ln_end_roaddist),length.out = 1000)
RSS_males_road_spring<-unique(paste(results_males_spring$wolf,results_males_spring$Year))

##create responses for each bear
for(i in 1:length(d_road)){
  RSS_road_spring<-(d_road[i]*road_beta_spring)
  RSS_males_road_spring<-as.data.frame(cbind(RSS_males_road_spring,RSS_road_spring))
}

RSS_males_road_spring[,2]<-as.numeric(as.character(RSS_males_road_spring[,2]))

average_new<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_road_spring$RSS_males_road_spring),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_road_spring[RSS_males_road_spring$RSS_males_road_spring==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_new[i,]<-mean
  }
}

RSS_males_cut_new_spring2<-melt(average_new[c(1:200),])

d_road<-rep(d_road,each=200)
RSS_males_cut_new_spring<-cbind(RSS_males_cut_new_spring2,d_road)

RSS_males_cut_new_spring_final<-RSS_males_cut_new_spring %>% group_by(d_road) %>%
  summarise(`5%`=quantile(value, probs=0.025),
            `50%`=quantile(value, probs=0.5),
            `95%`=quantile(value, probs=0.975),
            avg=mean(value),
            n=n())

RSS_males_cut_new_spring_final$lnRSS <- log(RSS_males_cut_new_spring_final$`50%`)
RSS_males_cut_new_spring_final$lnRSS5 <- log(RSS_males_cut_new_spring_final$`5%`)
RSS_males_cut_new_spring_final$lnRSS95 <- log(RSS_males_cut_new_spring_final$`95%`)
RSS_males_cut_new_spring_final$d_road_exp <- exp(RSS_males_cut_new_spring_final$d_road)

ggplot(RSS_males_cut_new_spring_final, aes(x=d_road_exp, y=`50%`)) +
  geom_ribbon(aes(ymin=`5%`, ymax=`95%`), alpha=0.2) +
  geom_line()


  
  
  
  













## RSS - Spring
roaddist_beta_spring<-as.numeric(as.character(results_males_spring[results_males_spring$Covariates=="ln_end_roaddist",7]))
newcut_beta_spring<-as.numeric(as.character(results_males_spring[results_males_spring$Covariates=="ln_end_roaddist:end_cutageclass_new1",7]))
regencut_beta_spring<-as.numeric(as.character(results_males_spring[results_males_spring$Covariates=="ln_end_roaddist:end_cutageclass_regen1",7]))
mean_SL_spring<-mean(wolves_used_available_final_spring[wolves_used_available_final_spring$used==1,67])
d_road_spring<-seq(min(wolves_used_available_final_spring$ln_end_roaddist), max(wolves_used_available_final_spring$ln_end_roaddist),length.out = 1000)
RSS_males_cut_new_spring<-unique(paste(results_males_spring$wolf,results_males_spring$Year))
RSS_males_cut_regen_spring<-unique(paste(results_males_spring$wolf,results_males_spring$Year))

##create responses for each bear
for(i in 1:length(d_road_spring)){
  RSS_new_spring<-(d_road_spring[i]/(d_road_spring[i]-(2*mean_SL_spring)))^(roaddist_beta_spring+(newcut_beta_spring*1))
  RSS_regen_spring<-(d_road_spring[i]/(d_road_spring[i]-(2*mean_SL_spring)))^(roaddist_beta_spring+(regencut_beta_spring*1))

  RSS_males_cut_new_spring<-as.data.frame(cbind(RSS_males_cut_new_spring,RSS_new_spring))
  RSS_males_cut_regen_spring<-as.data.frame(cbind(RSS_males_cut_regen_spring,RSS_regen_spring))
}

RSS_males_cut_new_spring[,2]<-as.numeric(as.character(RSS_males_cut_new_spring[,2]))
RSS_males_cut_regen_spring[,2]<-as.numeric(as.character(RSS_males_cut_regen_spring[,2]))

average_new<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_new_spring$RSS_males_cut_new_spring),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_new_spring[RSS_males_cut_new_spring$RSS_males_cut_new_spring==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_new[i,]<-mean
  }
}

RSS_males_cut_new_spring2<-melt(average_new[c(1:200),])
d_road_spring<-rep(d_road_spring,each=200)

RSS_males_cut_new_spring<-cbind(RSS_males_cut_new_spring2,d_road_spring)

RSS_males_cut_new_spring_final<-RSS_males_cut_new_spring %>% group_by(d_road_spring) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

##low motorised

average_regen<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_regen_spring$RSS_males_cut_regen_spring),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_regen_spring[RSS_males_cut_regen_spring$RSS_males_cut_regen_spring==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_regen[i,]<-mean
  }
}

RSS_males_cut_regen_spring2<-melt(average_regen[c(1:200),])

RSS_males_cut_regen_spring<-cbind(RSS_males_cut_regen_spring2,d_road_spring)

RSS_males_cut_regen_spring_final<-RSS_males_cut_regen_spring %>% group_by(d_road_spring) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

cutage<-c(rep("new",1000),rep("regen",1000))

RSS_males_cutagesize_spring_final<-rbind(RSS_males_cut_new_spring_final,RSS_males_cut_regen_spring_final)
RSS_males_cutagesize_spring_final<-cbind(RSS_males_cutagesize_spring_final,cutage)
RSS_males_cutagesize_spring_final$lnRSS <- log(RSS_males_cutagesize_spring_final$`50%`)
RSS_males_cutagesize_spring_final$lnRSS5 <- log(RSS_males_cutagesize_spring_final$`5%`)
RSS_males_cutagesize_spring_final$lnRSS95 <- log(RSS_males_cutagesize_spring_final$`95%`)
RSS_males_cutagesize_spring_final$lnavg <- log(RSS_males_cutagesize_spring_final$avg)
RSS_males_cutagesize_spring_final$d_road_exp <- exp(RSS_males_cutagesize_spring_final$d_road_spring)
RSS_males_cutagesize_spring_final$d_road_spring <- NULL
RSS_males_cutagesize_spring_final$Season <- "Spring"

ggplot(RSS_males_cutagesize_spring_final, aes(x=d_road_exp, y=lnRSS,fill=cutage,colour=cutage)) +
  geom_line() +
  geom_ribbon(aes(ymin=lnRSS5, ymax=lnRSS95), alpha=0.2)+xlim(0,1000)+ylim(0,0.5)


## RSS - Early sum
roaddist_beta_earlysum<-as.numeric(as.character(results_males_earlysum[results_males_earlysum$Covariates=="ln_end_roaddist",7]))
newcut_beta_earlysum<-as.numeric(as.character(results_males_earlysum[results_males_earlysum$Covariates=="ln_end_roaddist:end_cutageclass_new1",7]))
regencut_beta_earlysum<-as.numeric(as.character(results_males_earlysum[results_males_earlysum$Covariates=="ln_end_roaddist:end_cutageclass_regen1",7]))
mean_SL_earlysum<-mean(wolves_used_available_final_earlysum[wolves_used_available_final_earlysum$used==1,67])
d_road_earlysum<-seq(min(wolves_used_available_final_earlysum$ln_end_roaddist), max(wolves_used_available_final_earlysum$ln_end_roaddist),length.out = 1000)
RSS_males_cut_new_earlysum<-unique(paste(results_males_earlysum$wolf,results_males_earlysum$Year))
RSS_males_cut_regen_earlysum<-unique(paste(results_males_earlysum$wolf,results_males_earlysum$Year))

##create responses for each bear
for(i in 1:length(d_road_earlysum)){
  RSS_new_earlysum<-(d_road_earlysum[i]/(d_road_earlysum[i]-(2*mean_SL_earlysum)))^(roaddist_beta_earlysum+(newcut_beta_earlysum*1))
  RSS_regen_earlysum<-(d_road_earlysum[i]/(d_road_earlysum[i]-(2*mean_SL_earlysum)))^(roaddist_beta_earlysum+(regencut_beta_earlysum*1))

  RSS_males_cut_new_earlysum<-as.data.frame(cbind(RSS_males_cut_new_earlysum,RSS_new_earlysum))
  RSS_males_cut_regen_earlysum<-as.data.frame(cbind(RSS_males_cut_regen_earlysum,RSS_regen_earlysum))
}

RSS_males_cut_new_earlysum[,2]<-as.numeric(as.character(RSS_males_cut_new_earlysum[,2]))
RSS_males_cut_regen_earlysum[,2]<-as.numeric(as.character(RSS_males_cut_regen_earlysum[,2]))

average_new<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_new_earlysum$RSS_males_cut_new_earlysum),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_new_earlysum[RSS_males_cut_new_earlysum$RSS_males_cut_new_earlysum==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_new[i,]<-mean
  }
}

RSS_males_cut_new_earlysum2<-melt(average_new[c(1:200),])
d_road_earlysum<-rep(d_road_earlysum,each=200)

RSS_males_cut_new_earlysum<-cbind(RSS_males_cut_new_earlysum2,d_road_earlysum)

RSS_males_cut_new_earlysum_final<-RSS_males_cut_new_earlysum %>% group_by(d_road_earlysum) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

##low motorised

average_regen<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_regen_earlysum$RSS_males_cut_regen_earlysum),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_regen_earlysum[RSS_males_cut_regen_earlysum$RSS_males_cut_regen_earlysum==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_regen[i,]<-mean
  }
}

RSS_males_cut_regen_earlysum2<-melt(average_regen[c(1:200),])

RSS_males_cut_regen_earlysum<-cbind(RSS_males_cut_regen_earlysum2,d_road_earlysum)

RSS_males_cut_regen_earlysum_final<-RSS_males_cut_regen_earlysum %>% group_by(d_road_earlysum) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

cutage<-c(rep("new",1000),rep("regen",1000))

RSS_males_cutagesize_earlysum_final<-rbind(RSS_males_cut_new_earlysum_final,RSS_males_cut_regen_earlysum_final)
RSS_males_cutagesize_earlysum_final<-cbind(RSS_males_cutagesize_earlysum_final,cutage)
RSS_males_cutagesize_earlysum_final$lnRSS <- log(RSS_males_cutagesize_earlysum_final$`50%`)
RSS_males_cutagesize_earlysum_final$lnRSS5 <- log(RSS_males_cutagesize_earlysum_final$`5%`)
RSS_males_cutagesize_earlysum_final$lnRSS95 <- log(RSS_males_cutagesize_earlysum_final$`95%`)
RSS_males_cutagesize_earlysum_final$lnavg <- log(RSS_males_cutagesize_earlysum_final$avg)
RSS_males_cutagesize_earlysum_final$d_road_exp <- exp(RSS_males_cutagesize_earlysum_final$d_road_earlysum)
RSS_males_cutagesize_earlysum_final$d_road_earlysum <- NULL
RSS_males_cutagesize_earlysum_final$Season <- "Early summer"

ggplot(RSS_males_cutagesize_earlysum_final, aes(x=d_road_earlysum_exp, y=lnRSS,fill=cutage,colour=cutage)) +
  geom_line() +
  geom_ribbon(aes(ymin=lnRSS5, ymax=lnRSS95), alpha=0.2)+xlim(0,1000)+ylim(0,0.5)


## RSS - Late sum
roaddist_beta_latesum<-as.numeric(as.character(results_males_latesum[results_males_latesum$Covariates=="ln_end_roaddist",7]))
newcut_beta_latesum<-as.numeric(as.character(results_males_latesum[results_males_latesum$Covariates=="ln_end_roaddist:end_cutageclass_new1",7]))
regencut_beta_latesum<-as.numeric(as.character(results_males_latesum[results_males_latesum$Covariates=="ln_end_roaddist:end_cutageclass_regen1",7]))
mean_SL_latesum<-mean(wolves_used_available_final_latesum[wolves_used_available_final_latesum$used==1,67])
d_road_latesum<-seq(min(wolves_used_available_final_latesum$ln_end_roaddist), max(wolves_used_available_final_latesum$ln_end_roaddist),length.out = 1000)
RSS_males_cut_new_latesum<-unique(paste(results_males_latesum$wolf,results_males_latesum$Year))
RSS_males_cut_regen_latesum<-unique(paste(results_males_latesum$wolf,results_males_latesum$Year))

##create responses for each bear
for(i in 1:length(d_road_latesum)){
  RSS_new_latesum<-(d_road_latesum[i]/(d_road_latesum[i]-(2*mean_SL_latesum)))^(roaddist_beta_latesum+(newcut_beta_latesum*1))
  RSS_regen_latesum<-(d_road_latesum[i]/(d_road_latesum[i]-(2*mean_SL_latesum)))^(roaddist_beta_latesum+(regencut_beta_latesum*1))

  RSS_males_cut_new_latesum<-as.data.frame(cbind(RSS_males_cut_new_latesum,RSS_new_latesum))
  RSS_males_cut_regen_latesum<-as.data.frame(cbind(RSS_males_cut_regen_latesum,RSS_regen_latesum))
}

RSS_males_cut_new_latesum[,2]<-as.numeric(as.character(RSS_males_cut_new_latesum[,2]))
RSS_males_cut_regen_latesum[,2]<-as.numeric(as.character(RSS_males_cut_regen_latesum[,2]))

average_new<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_new_latesum$RSS_males_cut_new_latesum),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_new_latesum[RSS_males_cut_new_latesum$RSS_males_cut_new_latesum==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_new[i,]<-mean
  }
}

RSS_males_cut_new_latesum2<-melt(average_new[c(1:200),])
d_road_latesum<-rep(d_road_latesum,each=200)

RSS_males_cut_new_latesum<-cbind(RSS_males_cut_new_latesum2,d_road_latesum)

RSS_males_cut_new_latesum_final<-RSS_males_cut_new_latesum %>% group_by(d_road_latesum) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

##low motorised

average_regen<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_regen_latesum$RSS_males_cut_regen_latesum),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_regen_latesum[RSS_males_cut_regen_latesum$RSS_males_cut_regen_latesum==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_regen[i,]<-mean
  }
}

RSS_males_cut_regen_latesum2<-melt(average_regen[c(1:200),])

RSS_males_cut_regen_latesum<-cbind(RSS_males_cut_regen_latesum2,d_road_latesum)

RSS_males_cut_regen_latesum_final<-RSS_males_cut_regen_latesum %>% group_by(d_road_latesum) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

cutage<-c(rep("new",1000),rep("regen",1000))

RSS_males_cutagesize_latesum_final<-rbind(RSS_males_cut_new_latesum_final,RSS_males_cut_regen_latesum_final)
RSS_males_cutagesize_latesum_final<-cbind(RSS_males_cutagesize_latesum_final,cutage)
RSS_males_cutagesize_latesum_final$lnRSS <- log(RSS_males_cutagesize_latesum_final$`50%`)
RSS_males_cutagesize_latesum_final$lnRSS5 <- log(RSS_males_cutagesize_latesum_final$`5%`)
RSS_males_cutagesize_latesum_final$lnRSS95 <- log(RSS_males_cutagesize_latesum_final$`95%`)
RSS_males_cutagesize_latesum_final$lnavg <- log(RSS_males_cutagesize_latesum_final$avg)
RSS_males_cutagesize_latesum_final$d_road_exp <- exp(RSS_males_cutagesize_latesum_final$d_road_latesum)
RSS_males_cutagesize_latesum_final$d_road_latesum <- NULL
RSS_males_cutagesize_latesum_final$Season <- "Late summer"

ggplot(RSS_males_cutagesize_latesum_final, aes(x=d_road_latesum_exp, y=lnRSS,fill=cutage,colour=cutage)) +
  geom_line() +
  geom_ribbon(aes(ymin=lnRSS5, ymax=lnRSS95), alpha=0.2)+xlim(0,1000)+ylim(0,0.5)


## RSS - Autumn
roaddist_beta_autumn<-as.numeric(as.character(results_males_autumn[results_males_autumn$Covariates=="ln_end_roaddist",7]))
newcut_beta_autumn<-as.numeric(as.character(results_males_autumn[results_males_autumn$Covariates=="ln_end_roaddist:end_cutageclass_new1",7]))
regencut_beta_autumn<-as.numeric(as.character(results_males_autumn[results_males_autumn$Covariates=="ln_end_roaddist:end_cutageclass_regen1",7]))
mean_SL_autumn<-mean(wolves_used_available_final_autumn[wolves_used_available_final_autumn$used==1,67])
d_road_autumn<-seq(min(wolves_used_available_final_autumn$ln_end_roaddist), max(wolves_used_available_final_autumn$ln_end_roaddist),length.out = 1000)
RSS_males_cut_new_autumn<-unique(paste(results_males_autumn$wolf,results_males_autumn$Year))
RSS_males_cut_regen_autumn<-unique(paste(results_males_autumn$wolf,results_males_autumn$Year))

##create responses for each bear
for(i in 1:length(d_road_autumn)){
  RSS_new_autumn<-(d_road_autumn[i]/(d_road_autumn[i]-(2*mean_SL_autumn)))^(roaddist_beta_autumn+(newcut_beta_autumn*1))
  RSS_regen_autumn<-(d_road_autumn[i]/(d_road_autumn[i]-(2*mean_SL_autumn)))^(roaddist_beta_autumn+(regencut_beta_autumn*1))

  RSS_males_cut_new_autumn<-as.data.frame(cbind(RSS_males_cut_new_autumn,RSS_new_autumn))
  RSS_males_cut_regen_autumn<-as.data.frame(cbind(RSS_males_cut_regen_autumn,RSS_regen_autumn))
}

RSS_males_cut_new_autumn[,2]<-as.numeric(as.character(RSS_males_cut_new_autumn[,2]))
RSS_males_cut_regen_autumn[,2]<-as.numeric(as.character(RSS_males_cut_regen_autumn[,2]))

average_new<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_new_autumn$RSS_males_cut_new_autumn),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_new_autumn[RSS_males_cut_new_autumn$RSS_males_cut_new_autumn==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_new[i,]<-mean
  }
}

RSS_males_cut_new_autumn2<-melt(average_new[c(1:200),])
d_road_autumn<-rep(d_road_autumn,each=200)

RSS_males_cut_new_autumn<-cbind(RSS_males_cut_new_autumn2,d_road_autumn)

RSS_males_cut_new_autumn_final<-RSS_males_cut_new_autumn %>% group_by(d_road_autumn) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

##low motorised

average_regen<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_regen_autumn$RSS_males_cut_regen_autumn),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_regen_autumn[RSS_males_cut_regen_autumn$RSS_males_cut_regen_autumn==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_regen[i,]<-mean
  }
}

RSS_males_cut_regen_autumn2<-melt(average_regen[c(1:200),])

RSS_males_cut_regen_autumn<-cbind(RSS_males_cut_regen_autumn2,d_road_autumn)

RSS_males_cut_regen_autumn_final<-RSS_males_cut_regen_autumn %>% group_by(d_road_autumn) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

cutage<-c(rep("new",1000),rep("regen",1000))

RSS_males_cutagesize_autumn_final<-rbind(RSS_males_cut_new_autumn_final,RSS_males_cut_regen_autumn_final)
RSS_males_cutagesize_autumn_final<-cbind(RSS_males_cutagesize_autumn_final,cutage)
RSS_males_cutagesize_autumn_final$lnRSS <- log(RSS_males_cutagesize_autumn_final$`50%`)
RSS_males_cutagesize_autumn_final$lnRSS5 <- log(RSS_males_cutagesize_autumn_final$`5%`)
RSS_males_cutagesize_autumn_final$lnRSS95 <- log(RSS_males_cutagesize_autumn_final$`95%`)
RSS_males_cutagesize_autumn_final$lnavg <- log(RSS_males_cutagesize_autumn_final$avg)
RSS_males_cutagesize_autumn_final$d_road_exp <- exp(RSS_males_cutagesize_autumn_final$d_road_autumn)
RSS_males_cutagesize_autumn_final$d_road_autumn <- NULL
RSS_males_cutagesize_autumn_final$Season <- "Autumn"

ggplot(RSS_males_cutagesize_autumn_final, aes(x=d_road_autumn_exp, y=lnRSS,fill=cutage,colour=cutage)) +
  geom_line() +
  geom_ribbon(aes(ymin=lnRSS5, ymax=lnRSS95), alpha=0.2)+xlim(0,1000)+ylim(0,0.5)



## RSS - Winter
roaddist_beta_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="ln_end_roaddist",7]))
newcut_beta_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="ln_end_roaddist:end_cutageclass_new1",7]))
regencut_beta_winter<-as.numeric(as.character(results_males_winter[results_males_winter$Covariates=="ln_end_roaddist:end_cutageclass_regen1",7]))
mean_SL_winter<-mean(wolves_used_available_final_winter[wolves_used_available_final_winter$used==1,67])
d_road_winter<-seq(min(wolves_used_available_final_winter$ln_end_roaddist), max(wolves_used_available_final_winter$ln_end_roaddist),length.out = 1000)
RSS_males_cut_new_winter<-unique(paste(results_males_winter$wolf,results_males_winter$Year))
RSS_males_cut_regen_winter<-unique(paste(results_males_winter$wolf,results_males_winter$Year))

##create responses for each bear
for(i in 1:length(d_road_winter)){
  RSS_new_winter<-(d_road_winter[i]/(d_road_winter[i]-(2*mean_SL_winter)))^(roaddist_beta_winter+(newcut_beta_winter*1))
  RSS_regen_winter<-(d_road_winter[i]/(d_road_winter[i]-(2*mean_SL_winter)))^(roaddist_beta_winter+(regencut_beta_winter*1))

  RSS_males_cut_new_winter<-as.data.frame(cbind(RSS_males_cut_new_winter,RSS_new_winter))
  RSS_males_cut_regen_winter<-as.data.frame(cbind(RSS_males_cut_regen_winter,RSS_regen_winter))
}

RSS_males_cut_new_winter[,2]<-as.numeric(as.character(RSS_males_cut_new_winter[,2]))
RSS_males_cut_regen_winter[,2]<-as.numeric(as.character(RSS_males_cut_regen_winter[,2]))

average_new<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_new_winter$RSS_males_cut_new_winter),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_new_winter[RSS_males_cut_new_winter$RSS_males_cut_new_winter==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_new[i,]<-mean
  }
}

RSS_males_cut_new_winter2<-melt(average_new[c(1:200),])
d_road_winter<-rep(d_road_winter,each=200)

RSS_males_cut_new_winter<-cbind(RSS_males_cut_new_winter2,d_road_winter)

RSS_males_cut_new_winter_final<-RSS_males_cut_new_winter %>% group_by(d_road_winter) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

##low motorised

average_regen<-data.frame(matrix(NA, nrow = 200, ncol = 1000))
b.boot<-1:200
for(i in 1:length(b.boot)){
  wolf_bstrap<-as.vector(sample(unique(RSS_males_cut_regen_winter$RSS_males_cut_regen_winter),8,replace=TRUE))
  bstrap<-data.frame()
  for (j in 1:length(wolf_bstrap)){
    x<-RSS_males_cut_regen_winter[RSS_males_cut_regen_winter$RSS_males_cut_regen_winter==wolf_bstrap[j],]
    x2<-x[sample(nrow(x),1),]
    bstrap<-rbind(bstrap,x2)
    mean<-colMeans(bstrap[,2:1001])
    average_regen[i,]<-mean
  }
}

RSS_males_cut_regen_winter2<-melt(average_regen[c(1:200),])

RSS_males_cut_regen_winter<-cbind(RSS_males_cut_regen_winter2,d_road_winter)

RSS_males_cut_regen_winter_final<-RSS_males_cut_regen_winter %>% group_by(d_road_winter) %>%
  summarise(`5%`=quantile(value, probs=0.025, na.rm=TRUE),
            `50%`=quantile(value, probs=0.5, na.rm=TRUE),
            `95%`=quantile(value, probs=0.975, na.rm=TRUE),
            avg=median(value),
            n=n())

cutage<-c(rep("new",1000),rep("regen",1000))

RSS_males_cutagesize_winter_final<-rbind(RSS_males_cut_new_winter_final,RSS_males_cut_regen_winter_final)
RSS_males_cutagesize_winter_final<-cbind(RSS_males_cutagesize_winter_final,cutage)
RSS_males_cutagesize_winter_final$lnRSS <- log(RSS_males_cutagesize_winter_final$`50%`)
RSS_males_cutagesize_winter_final$lnRSS5 <- log(RSS_males_cutagesize_winter_final$`5%`)
RSS_males_cutagesize_winter_final$lnRSS95 <- log(RSS_males_cutagesize_winter_final$`95%`)
RSS_males_cutagesize_winter_final$lnavg <- log(RSS_males_cutagesize_winter_final$avg)
RSS_males_cutagesize_winter_final$d_road_exp <- exp(RSS_males_cutagesize_winter_final$d_road_winter)
RSS_males_cutagesize_winter_final$d_road_winter <- NULL
RSS_males_cutagesize_winter_final$Season <- "Winter"

ggplot(RSS_males_cutagesize_winter_final, aes(x=d_road_winter_exp, y=lnRSS,fill=cutage,colour=cutage)) +
  geom_line() +
  geom_ribbon(aes(ymin=lnRSS5, ymax=lnRSS95), alpha=0.2)+xlim(0,1000)+ylim(0,0.5)


RSS_males_cutagesize_all_final <- rbind(RSS_males_cutagesize_spring_final,RSS_males_cutagesize_earlysum_final,RSS_males_cutagesize_latesum_final,RSS_males_cutagesize_autumn_final,RSS_males_cutagesize_winter_final)
RSS_males_cutagesize_all_final$Season <- factor(RSS_males_cutagesize_all_final$Season, levels = c("Spring", "Early summer", "Late summer", "Autumn", "Winter"))
RSS_males_newcut_all_final <- RSS_males_cutagesize_all_final[RSS_males_cutagesize_all_final$cutage=="new",]
colnames(RSS_males_newcut_all_final)[11] <- "Distance to road (m)"

newRSS <- ggplot(RSS_males_newcut_all_final, aes(x=`Distance to road (m)`, y=lnRSS,fill=Season,colour=Season)) +
  geom_line() +
  geom_ribbon(aes(ymin=lnRSS5, ymax=lnRSS95), alpha=0.2)+xlim(0,3000)+ylim(-0.1,0.5)+
  theme(axis.title = element_text(size=18),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"))

RSS_males_regencut_all_final <- RSS_males_cutagesize_all_final[RSS_males_cutagesize_all_final$cutage=="regen",]
colnames(RSS_males_regencut_all_final)[11] <- "Distance to road (m)"

regenRSS <- ggplot(RSS_males_regencut_all_final, aes(x=`Distance to road (m)`, y=lnRSS,fill=Season,colour=Season)) +
  geom_line() +
  geom_ribbon(aes(ymin=lnRSS5, ymax=lnRSS95), alpha=0.2)+xlim(0,3000)+ylim(-0.1,0.5)+
  theme(axis.title = element_text(size=18),
        axis.text.x = element_text(size=16, colour = "black"),
        axis.text.y = element_text(size=18, colour = "black"))

RSSplots <- plot_grid(
  newRSS + theme(legend.position="none"),
  regenRSS + theme(legend.position="none"),
  align = 'vh',
  labels = c("     A) New cut", "B) Regenerating cut"),
  hjust = -0.5,
  vjust=2,
  nrow = 1
)
RSSplots

RSSlegend <- get_legend(
  # create some space to the left of the legend
  newRSS + theme(legend.box.margin = margin(0, 0, 0, 12),legend.text=element_text(size=16), legend.title=element_text(size=18))
)
RSSplot <- plot_grid(RSSplots,RSSlegend,rel_widths = c(3, .4))
RSSplot
ggsave("D:\\OneDrive\\Documents\\Academic\\PhD\\Publications\\iSSA\\Figures\\RSS.tiff", plot=RSSplot, units="in", width=16, height=8, dpi=600, compression = 'lzw')
